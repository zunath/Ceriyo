<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Squid</name>
    </assembly>
    <members>
        <member name="T:Squid.TextLine">
            <summary>
            A TextLine. This class is used by the internal Text layout engine.
            </summary>
        </member>
        <member name="F:Squid.TextLine.Elements">
            <summary>
            The elements
            </summary>
        </member>
        <member name="F:Squid.TextLine.Width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Squid.TextLine.CharLength">
            <summary>
            The char length
            </summary>
        </member>
        <member name="T:Squid.TextArea">
            <summary>
            A multiline text input. Text does not scroll. (use a Panel).
            </summary>
        </member>
        <member name="T:Squid.Control">
            <summary>
            The base class of all Controls
            </summary>
        </member>
        <member name="M:Squid.Control.GetElements">
            <summary>
            Returns all child elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.#ctor">
            <summary>
            Control ctor
            </summary>
        </member>
        <member name="M:Squid.Control.Focus">
            <summary>
            Makes the control the focused control
            </summary>
        </member>
        <member name="M:Squid.Control.Hit(System.Int32,System.Int32)">
            <summary>
            Return true if the point collides with the control
            </summary>
            <param name="x">x screen coord</param>
            <param name="y">y screen coord</param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.GetControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the first control found below the given screen point
            Returns elements and controls
            </summary>
            <param name="x">x screen coord</param>
            <param name="y">y screen coord</param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.GetControl(System.String)">
            <summary>
            Returns the first control matching the given name.
            This method searches all siblings.
            </summary>
            <param name="name">Name of the control to find</param>
            <returns>Matching control</returns>
        </member>
        <member name="M:Squid.Control.GetControls``1">
            <summary>
            Returns direct children of the given type
            </summary>
            <returns>Matching controls</returns>
        </member>
        <member name="M:Squid.Control.GetControlAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first control found below the given screen point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.DoDragDrop(Squid.Control)">
            <summary>
            Performs a drag drop operation
            </summary>
            <param name="data">The control to be displayed as dragged</param>
        </member>
        <member name="M:Squid.Control.IsChildOf(Squid.Control)">
            <summary>
            Returns true if the given control is a sibling of the control
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.Contains(Squid.Control)">
            <summary>
            Override this in custom controls to handle special cases
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.Click(System.Int32)">
            <summary>
            Fires the MouseClick event
            </summary>
        </member>
        <member name="M:Squid.Control.BringToFront">
            <summary>
            Makes the control the topmost control in its container
            </summary>
        </member>
        <member name="M:Squid.Control.ResizeTo(Squid.Point,Squid.AnchorStyles)">
            <summary>
            Resizes to.
            </summary>
            <param name="size">The size.</param>
            <param name="anchor">The anchor.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Squid.Control.ProcessEvents">
            <summary>
            Processes the events.
            </summary>
        </member>
        <member name="M:Squid.Control.PerformLayout">
            <summary>
            Performs the layout.
            </summary>
        </member>
        <member name="M:Squid.Control.GetOpacity">
            <summary>
            Gets the opacity.
            </summary>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Squid.Control.GetOpacity(System.Single)">
            <summary>
            Gets the opacity.
            </summary>
            <param name="opacity">The opacity.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Squid.Control.AlignText(System.String,Squid.Alignment,Squid.Margin,System.Int32)">
            <summary>
            Aligns the text.
            </summary>
            <param name="text">The text.</param>
            <param name="align">The align.</param>
            <param name="padding">The padding.</param>
            <param name="font">The font.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Squid.Control.AlignText(System.String,Squid.Alignment,Squid.Margin,System.Int32,Squid.Point@)">
            <summary>
            Aligns the text.
            </summary>
            <param name="text">The text.</param>
            <param name="align">The align.</param>
            <param name="padding">The padding.</param>
            <param name="font">The font.</param>
            <param name="tsize">The tsize.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Squid.Control.OnUpdate">
            <summary>
            Called every frame.
            Override this to do per-frame operations
            </summary>
        </member>
        <member name="M:Squid.Control.OnLateUpdate">
            <summary>
            Called late every frame.
            Override this in special circumstances to do per-frame operations
            </summary>
        </member>
        <member name="M:Squid.Control.OnKeyDown(Squid.KeyEventArgs)">
            <summary>
            Override this method to handle any keyevents passed to the control
            </summary>
        </member>
        <member name="M:Squid.Control.OnKeyUp(Squid.KeyEventArgs)">
            <summary>
            Override this method to handle any keyevents passed to the control
            </summary>
        </member>
        <member name="M:Squid.Control.OnAutoSize">
            <summary>
            Override this to implement your own AutoSize behavior
            </summary>
        </member>
        <member name="M:Squid.Control.DrawText(Squid.Style,System.Single)">
            <summary>
            Override this to draw text.
            </summary>
            <param name="style">The style to be used</param>
            <param name="opacity">The opacity to be used</param>
        </member>
        <member name="M:Squid.Control.DrawCustom">
            <summary>
            Override this to do additional drawing after the control has been drawn
            </summary>
        </member>
        <member name="M:Squid.Control.OnStateChanged">
            <summary>
            Override this to handle state changes.
            This is useful to sync states between controls.
            </summary>
        </member>
        <member name="M:Squid.Control.DrawStyle(Squid.Style,System.Single)">
            <summary>
            Override this to do additional drawing
            Call the base method to draw the control as usual
            </summary>
            <param name="style"></param>
            <param name="opacity"></param>
        </member>
        <member name="M:Squid.Control.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor rectangle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Squid.Control.ResetScissor">
            <summary>
            Resets the scissor test to whatever is was before the last SetScissor call
            </summary>
        </member>
        <member name="M:Squid.Control.Clip(Squid.Rectangle)">
            <summary>
            Clips the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Squid.Control.OnDragEnter(Squid.DragDropEventArgs)">
            <summary>
            Raises the <see cref="E:DragEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Squid.DragDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Squid.Control.OnDragLeave(Squid.DragDropEventArgs)">
            <summary>
            Raises the <see cref="E:DragLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Squid.DragDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Squid.Control.OnDragResponse(Squid.DragDropEventArgs)">
            <summary>
            Raises the <see cref="E:DragResponse"/> event.
            </summary>
            <param name="e">The <see cref="T:Squid.DragDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Squid.Control.OnDragDrop(Squid.DragDropEventArgs)">
            <summary>
            Raises the <see cref="E:DragDrop"/> event.
            </summary>
            <param name="e">The <see cref="T:Squid.DragDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Squid.Control.OnMouseDoubleClick(System.Int32)">
            <summary>
            Raises the <see cref="E:MouseDoubleClick" /> event.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Squid.Control.OnMouseDrag(System.Int32)">
            <summary>
            Raised the MouseDrag event
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Squid.Control.OnMousePress(System.Int32)">
            <summary>
            Raised the MousePress event
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Squid.Control.OnMouseClick(System.Int32)">
            <summary>
            Raised the MouseClick event
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Squid.Control.OnMouseRelease(System.Int32)">
            <summary>
            Raised the MouseRelease event
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Squid.Control.OnMouseDown(System.Int32)">
            <summary>
            Raised the MouseDown event
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Squid.Control.OnMouseEnter">
            <summary>
            Raised the MouseEnter event
            </summary>
        </member>
        <member name="M:Squid.Control.OnMouseLeave">
            <summary>
            Raised the MouseLeave event
            </summary>
        </member>
        <member name="M:Squid.Control.OnMouseUp(System.Int32)">
            <summary>
            Raised the MouseUp event
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Squid.Control.OnGotFocus">
            <summary>
            Raised the GotFocus event
            </summary>
        </member>
        <member name="M:Squid.Control.OnLostFocus">
            <summary>
            Raised the LostFocus event
            </summary>
        </member>
        <member name="E:Squid.Control.Update">
            <summary>
            Raised when [update].
            </summary>
        </member>
        <member name="E:Squid.Control.LateUpdate">
            <summary>
            Raised when [late update].
            </summary>
        </member>
        <member name="E:Squid.Control.SizeChanged">
            <summary>
            Raised when [size changed].
            </summary>
        </member>
        <member name="E:Squid.Control.PositionChanged">
            <summary>
            Raised when [position changed].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseEnter">
            <summary>
            Raised when [mouse enter].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseLeave">
            <summary>
            Raised when [mouse leave].
            </summary>
        </member>
        <member name="E:Squid.Control.GotFocus">
            <summary>
            Raised when [got focus].
            </summary>
        </member>
        <member name="E:Squid.Control.LostFocus">
            <summary>
            Raised when [lost focus].
            </summary>
        </member>
        <member name="E:Squid.Control.KeyDown">
            <summary>
            Raised when [key down].
            </summary>
        </member>
        <member name="E:Squid.Control.KeyUp">
            <summary>
            Raised when [key up].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseDrag">
            <summary>
            Raised when [mouse drag].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseUp">
            <summary>
            Raised when [mouse up].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseDown">
            <summary>
            Raised when [mouse down].
            </summary>
        </member>
        <member name="E:Squid.Control.MousePress">
            <summary>
            Raised when [mouse press].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseClick">
            <summary>
            Raised when [mouse click].
            </summary>
        </member>
        <member name="E:Squid.Control.MouseDoubleClick">
            <summary>
            Raised when [mouse double click].
            </summary>
        </member>
        <member name="E:Squid.Control.DragDrop">
            <summary>
            Raised when [drag drop].
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Squid.Control.DragEnter" -->
        <!-- Badly formed XML comment ignored for member "E:Squid.Control.DragLeave" -->
        <!-- Badly formed XML comment ignored for member "E:Squid.Control.DragResponse" -->
        <member name="P:Squid.Control.IsElement">
            <summary>
            Returns true if the control is a child element
            </summary>
        </member>
        <member name="P:Squid.Control.Depth">
            <summary>
            Returns the depth of the control
            </summary>
        </member>
        <member name="P:Squid.Control.Tint">
            <summary>
            Gets/Sets the color used to Tint the used Style
            </summary>
        </member>
        <member name="P:Squid.Control.Name">
            <summary>
            Name of the control
            </summary>
        </member>
        <member name="P:Squid.Control.Opacity">
            <summary>
            Opacity of the control
            This is multiplied with any style opacity and hierarchical opacity
            </summary>
        </member>
        <member name="P:Squid.Control.AutoSize">
            <summary>
            Gets/Sets the autosize behavior
            </summary>
        </member>
        <member name="P:Squid.Control.AllowDrop">
            <summary>
            Gets/Sets whether or not the control processes DragDrop events
            </summary>
        </member>
        <member name="P:Squid.Control.AllowFocus">
            <summary>
            Gets/Sets whether or not the control is able to acquire focus
            </summary>
        </member>
        <member name="P:Squid.Control.Scissor">
            <summary>
            Gets/Sets whether or not hardware scissor test is used
            </summary>
        </member>
        <member name="P:Squid.Control.Dock">
            <summary>
            Gets/Sets the docking behavior
            </summary>
        </member>
        <member name="P:Squid.Control.Style">
            <summary>
            Name of the ControlStyle 
            </summary>
        </member>
        <member name="P:Squid.Control.NoEvents">
            <summary>
            Gets/Sets whether or not the control is interactive and processes any events
            </summary>
        </member>
        <member name="P:Squid.Control.Tag">
            <summary>
            user defined data object
            </summary>
        </member>
        <member name="P:Squid.Control.UserData">
            <summary>
            user defined data object
            </summary>
        </member>
        <member name="P:Squid.Control.TabIndex">
            <summary>
            tab index
            </summary>
        </member>
        <member name="P:Squid.Control.Visible">
            <summary>
            Gets/Sets whether or not the control is visible
            </summary>
        </member>
        <member name="P:Squid.Control.Container">
            <summary>
            Returns the parent of the control as IControlContainer
            </summary>
        </member>
        <member name="P:Squid.Control.Cursor">
            <summary>
            Name of the cursor to use 
            </summary>
        </member>
        <member name="P:Squid.Control.Tooltip">
            <summary>
            Tooltip text 
            </summary>
        </member>
        <member name="P:Squid.Control.ZIndex">
            <summary>
            Returns the z-index
            </summary>
        </member>
        <member name="P:Squid.Control.Enabled">
            <summary>
            Gets/Sets whether or not the control, and all its children, is enabled
            </summary>
        </member>
        <member name="P:Squid.Control.Parent">
            <summary>
            Gets/Sets the parent
            </summary>
        </member>
        <member name="P:Squid.Control.MinSize">
            <summary>
            Gets/Sets the minimum size.
            This is only used during Control.Resize
            </summary>
        </member>
        <member name="P:Squid.Control.MaxSize">
            <summary>
            Gets/Sets the maximum size.
            This is only used during Control.Resize
            </summary>
        </member>
        <member name="P:Squid.Control.Size">
            <summary>
            Gets/Sets the size
            </summary>
        </member>
        <member name="P:Squid.Control.Position">
            <summary>
            Gets/Sets the position (relative to parent)
            </summary>
        </member>
        <member name="P:Squid.Control.Anchor">
            <summary>
            Gets/Sets the anchoring behavior
            </summary>
        </member>
        <member name="P:Squid.Control.Margin">
            <summary>
            Defines the space around a control that keeps other controls at a specified distance from the control's borders.
            </summary>
        </member>
        <member name="P:Squid.Control.Padding">
            <summary>
            Defines the space inside of a control that keeps child controls at a specified distance from the control's borders.
            </summary>
        </member>
        <member name="P:Squid.Control.State">
            <summary>
            Gets/Sets the state
            </summary>
        </member>
        <member name="P:Squid.Control.FadeSpeed">
            <summary>
            Gets/Sets the local fading speed
            </summary>
        </member>
        <member name="P:Squid.Control.Location">
            <summary>
            Returns the screen position
            </summary>
        </member>
        <member name="P:Squid.Control.Desktop">
            <summary>
            Returns the root control
            </summary>
        </member>
        <member name="P:Squid.Control.Animation">
            <summary>
            Use this to run animations as coroutines
            </summary>
        </member>
        <member name="P:Squid.Control.AutoId">
            <summary>
            Gets the unique auto id.
            </summary>
            <value>The auto id.</value>
        </member>
        <member name="M:Squid.TextArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TextArea"/> class.
            </summary>
        </member>
        <member name="M:Squid.TextArea.GetCursor">
            <summary>
            Gets the cursor.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.TextArea.SetCursor(System.Int32)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="E:Squid.TextArea.TextChanged">
            <summary>
            Raised when [text changed].
            </summary>
        </member>
        <member name="E:Squid.TextArea.TextCommit">
            <summary>
            Raised when [text commit].
            </summary>
        </member>
        <member name="E:Squid.TextArea.TextCancel">
            <summary>
            Raised when [text cancel].
            </summary>
        </member>
        <member name="P:Squid.TextArea.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TextArea.Leading">
            <summary>
            Gets or sets the leading.
            </summary>
            <value>The leading.</value>
        </member>
        <member name="P:Squid.TextArea.LinkColor">
            <summary>
            Gets or sets the color of the link.
            </summary>
            <value>The color of the link.</value>
        </member>
        <member name="P:Squid.TextArea.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Squid.TextArea.BlinkColor">
            <summary>
            Gets or sets the color of the blink.
            </summary>
            <value>The color of the blink.</value>
        </member>
        <member name="P:Squid.TextArea.UseTextColor">
            <summary>
            Gets or sets a value indicating whether [use text color].
            </summary>
            <value><c>true</c> if [use text color]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TextArea.TextAlign">
            <summary>
            Gets or sets the text align.
            </summary>
            <value>The text align.</value>
        </member>
        <member name="P:Squid.TextArea.BlinkInterval">
            <summary>
            Gets or sets the blink interval.
            </summary>
            <value>The blink interval.</value>
        </member>
        <member name="P:Squid.TextArea.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Squid.Tooltip">
            <summary>
            The Tooltip base class. Inherit this to create custom Tooltip controls.
            </summary>
        </member>
        <member name="T:Squid.Frame">
            <summary>
            A Control container
            </summary>
        </member>
        <member name="T:Squid.IControlContainer">
            <summary>
            Interface IControlContainer
            </summary>
        </member>
        <member name="P:Squid.IControlContainer.Controls">
            <summary>
            Gets or sets the controls.
            </summary>
            <value>The controls.</value>
        </member>
        <member name="M:Squid.Frame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Frame"/> class.
            </summary>
        </member>
        <member name="M:Squid.Tooltip.SetContext(Squid.Control)">
            <summary>
            Sets the context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Squid.Tooltip.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Squid.Tooltip.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Squid.Tooltip.AutoLayout">
            <summary>
            Gets or sets a value indicating whether [auto layout].
            </summary>
            <value><c>true</c> if [auto layout]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.SimpleTooltip">
            <summary>
            Simple text tooltip that fades in and out
            </summary>
        </member>
        <member name="M:Squid.SimpleTooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.SimpleTooltip"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Squid.SimpleTooltip.SetContext(Squid.Control)" -->
        <member name="P:Squid.SimpleTooltip.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Squid.SimpleTooltip.FadeDuration">
            <summary>
            Gets or sets the duration of the fade.
            </summary>
            <value>The duration of the fade.</value>
        </member>
        <member name="P:Squid.SimpleTooltip.Delay">
            <summary>
            Gets or sets the delay.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="T:Squid.ListView">
            <summary>
            A multi-column ListView.
            </summary>
        </member>
        <member name="F:Squid.ListView.CreateCell">
            <summary>
            The cell formatter delegate
            </summary>
        </member>
        <member name="F:Squid.ListView.CreateHeader">
            <summary>
            The header formatter delegate
            </summary>
        </member>
        <member name="M:Squid.ListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ListView"/> class.
            </summary>
        </member>
        <member name="M:Squid.ListView.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Sets the objects.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:Squid.ListView.Sort``1(System.Comparison{``0})">
            <summary>
            Sorts all objects using the specified comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Squid.ListView.GetAspectValue(System.Object,Squid.ListView.Column)">
            <summary>
            Gets the aspect value.
            </summary>
            <param name="item">The item.</param>
            <param name="column">The column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Squid.ListView.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Squid.ListView.Panel">
            <summary>
            Gets the panel.
            </summary>
            <value>The panel.</value>
        </member>
        <member name="P:Squid.ListView.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Squid.ListView.StretchLastColumn">
            <summary>
            Gets or sets a value indicating whether [stretch last column].
            </summary>
            <value><c>true</c> if [stretch last column]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.ListView.FullRowSelect">
            <summary>
            Gets or sets a value indicating whether [full row select].
            </summary>
            <value><c>true</c> if [full row select]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.ListView.CellFormatter">
            <summary>
            Delegate CellFormatter
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Squid.ListView.FormatCellEventArgs"/> instance containing the event data.</param>
            <returns>Control.</returns>
        </member>
        <member name="T:Squid.ListView.HeaderFormatter">
            <summary>
            Delegate HeaderFormatter
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Squid.ListView.FormatHeaderEventArgs"/> instance containing the event data.</param>
            <returns>Control.</returns>
        </member>
        <member name="T:Squid.ListView.FormatCellEventArgs">
            <summary>
            Class FormatCellEventArgs
            </summary>
        </member>
        <member name="T:Squid.ListView.FormatHeaderEventArgs">
            <summary>
            Class FormatHeaderEventArgs
            </summary>
        </member>
        <member name="T:Squid.ListView.Column">
            <summary>
            A Column in the ListView
            </summary>
        </member>
        <member name="F:Squid.ListView.Column.Tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="M:Squid.ListView.Column.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ListView.Column"/> class.
            </summary>
        </member>
        <member name="P:Squid.ListView.Column.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Squid.ListView.Column.Aspect">
            <summary>
            Gets or sets the aspect.
            </summary>
            <value>The aspect.</value>
        </member>
        <member name="P:Squid.ListView.Column.Frame">
            <summary>
            Gets the frame.
            </summary>
            <value>The frame.</value>
        </member>
        <member name="P:Squid.ListView.Column.FrameHandle">
            <summary>
            Gets the frame handle.
            </summary>
            <value>The frame handle.</value>
        </member>
        <member name="P:Squid.ListView.Column.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Squid.ListView.Column.HeaderHandle">
            <summary>
            Gets the header handle.
            </summary>
            <value>The header handle.</value>
        </member>
        <member name="P:Squid.ListView.Column.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Squid.ListView.Column.MinWidth">
            <summary>
            Gets or sets the minimum width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Squid.ListView.Column.MaxWidth">
            <summary>
            Gets or sets the maximum width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:Squid.ListView.Row">
            <summary>
            Class Row
            </summary>
        </member>
        <member name="F:Squid.ListView.Row.Index">
            <summary>
            The index
            </summary>
        </member>
        <member name="F:Squid.ListView.Row.RowObject">
            <summary>
            The row object
            </summary>
        </member>
        <member name="F:Squid.ListView.Row.Cells">
            <summary>
            The cells
            </summary>
        </member>
        <member name="T:Squid.Skin">
            <summary>
            A Skin. This defines the look of all Controls.
            </summary>
        </member>
        <member name="M:Squid.Skin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Skin"/> class.
            </summary>
        </member>
        <member name="P:Squid.Skin.Styles">
            <summary>
            Gets or sets the styles.
            </summary>
            <value>The styles.</value>
        </member>
        <member name="P:Squid.Skin.Cursors">
            <summary>
            Gets or sets the cursors.
            </summary>
            <value>The cursors.</value>
        </member>
        <member name="T:Squid.KeyData">
            <summary>
            Struct KeyData
            </summary>
        </member>
        <member name="F:Squid.KeyData.Scancode">
            <summary>
            The scancode
            </summary>
        </member>
        <member name="F:Squid.KeyData.Pressed">
            <summary>
            The pressed
            </summary>
        </member>
        <member name="F:Squid.KeyData.Released">
            <summary>
            The released
            </summary>
        </member>
        <member name="P:Squid.KeyData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Squid.Rectangle">
            <summary>
            Struct Rectangle
            </summary>
        </member>
        <member name="M:Squid.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Rectangle"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Squid.Rectangle.#ctor(Squid.Point,Squid.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Rectangle"/> struct.
            </summary>
            <param name="pos">The pos.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Squid.Rectangle.Intersects(Squid.Rectangle)">
            <summary>
            Intersects the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Squid.Rectangle.Contains(Squid.Rectangle)">
            <summary>
            Intersects the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Squid.Rectangle.Clip(Squid.Rectangle)">
            <summary>
            Clips the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Squid.Rectangle.Contains(Squid.Point)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if [contains] [the specified point]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Squid.Rectangle.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns><c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Squid.Rectangle.Left">
            <summary>
            Gets or sets the left edge.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Squid.Rectangle.Top">
            <summary>
            Gets or sets the top edge.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Squid.Rectangle.Right">
            <summary>
            Gets or sets the right edge.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Squid.Rectangle.Bottom">
            <summary>
            Gets or sets the bottom edge.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Squid.Rectangle.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Squid.Rectangle.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Squid.RectangleConverter">
            <summary>
            Converts from String to Rectangle and vice versa.
            </summary>
        </member>
        <member name="M:Squid.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Squid.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">destinationType</exception>
        </member>
        <member name="M:Squid.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.</returns>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            propertyValues
            </exception>
        </member>
        <member name="M:Squid.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value; otherwise, false.</returns>
        </member>
        <member name="M:Squid.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:Squid.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties of this object; otherwise, false.</returns>
        </member>
        <member name="T:Squid.MultilineAttribute">
            <summary>
            Used to indicate a multiline string to external editors
            </summary>
        </member>
        <member name="T:Squid.ToolboxAttribute">
            <summary>
            Used to indicate whether this object/member should be visible in external editors
            </summary>
        </member>
        <member name="T:Squid.HiddenAttribute">
            <summary>
            Used to indicate whether this object/member should be visible in external editors
            </summary>
        </member>
        <member name="T:Squid.IntColorAttribute">
            <summary>
             Used to indicate member that is used as a color to external editors
            </summary>
        </member>
        <member name="T:Squid.TextureAttribute">
            <summary>
            Used to indicate a member that is used as a texture to external editors
            </summary>
        </member>
        <member name="T:Squid.FontAttribute">
            <summary>
            Used to indicate a member that is used as a font to external editors
            </summary>
        </member>
        <member name="T:Squid.StyleAttribute">
            <summary>
            Used to indicate a member that is used as a Style to external editor
            </summary>
        </member>
        <member name="T:Squid.ValueRangeAttribute">
            <summary>
            Used to indicate a value range to external editors
            </summary>
        </member>
        <member name="T:Squid.Button">
            <summary>
            A Button
            </summary>
        </member>
        <member name="T:Squid.Label">
            <summary>
            A Label without selection.
            Supports multi- and singleline, textwrap and some bbcode tags.
            </summary>
        </member>
        <member name="T:Squid.ISelectable">
            <summary>
            Interface ISelectable
            </summary>
        </member>
        <member name="P:Squid.ISelectable.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.ISelectable"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Squid.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Label"/> class.
            </summary>
        </member>
        <member name="E:Squid.Label.LinkClicked">
            <summary>
            Raised when [link clicked].
            </summary>
        </member>
        <member name="P:Squid.Label.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Label"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Label.Leading">
            <summary>
            Gets or sets the leading.
            </summary>
            <value>The leading.</value>
        </member>
        <member name="P:Squid.Label.TextWrap">
            <summary>
            Gets or sets a value indicating whether [text wrap].
            </summary>
            <value><c>true</c> if [text wrap]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Label.BBCodeEnabled">
            <summary>
            Gets or sets a value indicating whether [BB code enabled].
            </summary>
            <value><c>true</c> if [BB code enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Label.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Squid.Label.LinkColor">
            <summary>
            Gets or sets the color of the link.
            </summary>
            <value>The color of the link.</value>
        </member>
        <member name="P:Squid.Label.UseTextColor">
            <summary>
            Gets or sets a value indicating whether [use text color].
            </summary>
            <value><c>true</c> if [use text color]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Label.TextAlign">
            <summary>
            Gets or sets the text align.
            </summary>
            <value>The text align.</value>
        </member>
        <member name="P:Squid.Label.AutoEllipsis">
            <summary>
            Get or sets the ellipsis
            </summary>
        </member>
        <member name="P:Squid.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Squid.Label.LinkClickedEventHandler">
            <summary>
            Delegate LinkClickedEventHandler
            </summary>
            <param name="href">The href.</param>
        </member>
        <member name="T:Squid.ICheckable">
            <summary>
            Interface ICheckable
            </summary>
        </member>
        <member name="P:Squid.ICheckable.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.ICheckable"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Squid.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Button"/> class.
            </summary>
        </member>
        <member name="P:Squid.Button.CheckOnClick">
            <summary>
            Gets or sets a value indicating whether Checked changes on MouseClick.
            </summary>
            <value><c>true</c> if [check on click]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Squid.Button.CheckedChanged">
            <summary>
            Raised when Checked changed].
            </summary>
        </member>
        <member name="E:Squid.Button.BeforeCheckedChanged">
            <summary>
            Raised before Checked
            </summary>
        </member>
        <member name="P:Squid.Button.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Button"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.CheckBox">
            <summary>
            A CheckBox
            </summary>
        </member>
        <member name="M:Squid.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.CheckBox"/> class.
            </summary>
        </member>
        <member name="P:Squid.CheckBox.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.CheckBox.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="E:Squid.CheckBox.CheckedChanged">
            <summary>
            Raised when [checked changed].
            </summary>
        </member>
        <member name="P:Squid.CheckBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Squid.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.CheckBox"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.ControlAnimation">
            <summary>
            Class that manages the coroutines of a control
            </summary>
        </member>
        <member name="T:Squid.RadioButton">
            <summary>
            A RadioButton
            </summary>
        </member>
        <member name="M:Squid.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.RadioButton"/> class.
            </summary>
        </member>
        <member name="E:Squid.RadioButton.CheckedChanged">
            <summary>
            Raised when [checked changed].
            </summary>
        </member>
        <member name="P:Squid.RadioButton.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.RadioButton.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Squid.RadioButton.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Squid.RadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Squid.RadioButton.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.RadioButton"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.ScrollBar">
            <summary>
            A ScrollBar.Can be used vertically and horizontally.
            </summary>
        </member>
        <member name="M:Squid.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ScrollBar"/> class.
            </summary>
        </member>
        <member name="M:Squid.ScrollBar.Scroll(System.Int32)">
            <summary>
            Scrolls in the specified direction.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="E:Squid.ScrollBar.ValueChanged">
            <summary>
            Raised when [value changed].
            </summary>
        </member>
        <member name="P:Squid.ScrollBar.ButtonUp">
            <summary>
            Gets the button up.
            </summary>
            <value>The button up.</value>
        </member>
        <member name="P:Squid.ScrollBar.ButtonDown">
            <summary>
            Gets the button down.
            </summary>
            <value>The button down.</value>
        </member>
        <member name="P:Squid.ScrollBar.Slider">
            <summary>
            Gets the slider.
            </summary>
            <value>The slider.</value>
        </member>
        <member name="P:Squid.ScrollBar.ShowAlways">
            <summary>
            Gets or sets a value indicating whether [show always].
            </summary>
            <value><c>true</c> if [show always]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.ScrollBar.Ease">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.ScrollBar"/> is ease.
            </summary>
            <value><c>true</c> if ease; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.ScrollBar.EasedValue">
            <summary>
            Gets the eased value.
            </summary>
            <value>The eased value.</value>
        </member>
        <member name="P:Squid.ScrollBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Squid.ScrollBar.Steps">
            <summary>
            Gets or sets the steps.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:Squid.ScrollBar.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Squid.ScrollBar.AutoScale">
            <summary>
            Gets or sets a value indicating whether [auto scale].
            </summary>
            <value><c>true</c> if [auto scale]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.ScrollBar.MouseScrollSpeed">
            <summary>
            Gets or sets the mouse scroll speed.
            </summary>
            <value>The mouse scroll speed.</value>
        </member>
        <member name="P:Squid.ScrollBar.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:Squid.ImageControl">
            <summary>
            A control that show a texture
            </summary>
        </member>
        <member name="M:Squid.ImageControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ImageControl"/> class.
            </summary>
        </member>
        <member name="P:Squid.ImageControl.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="P:Squid.ImageControl.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Squid.ImageControl.TextureRect">
            <summary>
            Gets or sets the texture rect.
            </summary>
            <value>The texture rect.</value>
        </member>
        <member name="T:Squid.SquidEventArgs">
            <summary>
            Class SquidEventArgs
            </summary>
        </member>
        <member name="P:Squid.SquidEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.SquidEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.MouseEventArgs">
            <summary>
            Class MouseEventArgs
            </summary>
        </member>
        <member name="P:Squid.MouseEventArgs.Button">
            <summary>
            Gets or sets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="T:Squid.KeyEventArgs">
            <summary>
            Class KeyEventArgs
            </summary>
        </member>
        <member name="M:Squid.KeyEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.KeyEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Squid.KeyEventArgs.#ctor(Squid.KeyData)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.KeyEventArgs"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Squid.KeyEventArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Squid.KeyEventArgs.Scancode">
            <summary>
            Gets or sets the scancode.
            </summary>
            <value>The scancode.</value>
        </member>
        <member name="T:Squid.DragDropEventArgs">
            <summary>
            Class DragDropEventArgs
            </summary>
        </member>
        <member name="F:Squid.DragDropEventArgs.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="F:Squid.DragDropEventArgs.DraggedControl">
            <summary>
            The dragged control
            </summary>
        </member>
        <member name="T:Squid.Flipbook">
            <summary>
            Helper class to manage a sprite sheet animation.
            </summary>
        </member>
        <member name="T:Squid.Coroutine">
            <summary>
            This class managed to lifetime of a coroutine.
            </summary>
        </member>
        <member name="T:Squid.CursorCollection">
            <summary>
            A collection of Cursors
            </summary>
        </member>
        <member name="T:Squid.Cursor">
            <summary>
            Represents the image that is displayed at the mouse position.
            </summary>
        </member>
        <member name="M:Squid.Cursor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Cursor"/> class.
            </summary>
        </member>
        <member name="M:Squid.Cursor.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the cursor at the specified position.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:Squid.Cursor.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Squid.Cursor.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="P:Squid.Cursor.HotSpot">
            <summary>
            Gets or sets the hot spot.
            </summary>
            <value>The hot spot.</value>
        </member>
        <member name="P:Squid.Cursor.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Squid.Cursor.TextureRect">
            <summary>
            Gets or sets the texture rect.
            </summary>
            <value>The texture rect.</value>
        </member>
        <member name="T:Squid.FlipbookCursor">
            <summary>
            A flibook based implementation of an animated Cursor.
            </summary>
        </member>
        <member name="F:Squid.FlipbookCursor.flip">
            <summary>
            The flip
            </summary>
        </member>
        <member name="M:Squid.FlipbookCursor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.FlipbookCursor"/> class.
            </summary>
        </member>
        <member name="M:Squid.FlipbookCursor.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the cursor at the specified position.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:Squid.FlipbookCursor.Rows">
            <summary>
            Gets or sets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Squid.FlipbookCursor.Columns">
            <summary>
            Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Squid.FlipbookCursor.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>The speed.</value>
        </member>
        <member name="T:Squid.Cursors">
            <summary>
            Standard cursor type strings.
            Note: You don't have to use these.
            </summary>
        </member>
        <member name="F:Squid.Cursors.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Squid.Cursors.Move">
            <summary>
            The move
            </summary>
        </member>
        <member name="F:Squid.Cursors.HSplit">
            <summary>
            The H split
            </summary>
        </member>
        <member name="F:Squid.Cursors.VSplit">
            <summary>
            The V split
            </summary>
        </member>
        <member name="F:Squid.Cursors.SizeNESW">
            <summary>
            The size NESW
            </summary>
        </member>
        <member name="F:Squid.Cursors.SizeNS">
            <summary>
            The size NS
            </summary>
        </member>
        <member name="F:Squid.Cursors.SizeNWSE">
            <summary>
            The size NWSE
            </summary>
        </member>
        <member name="F:Squid.Cursors.SizeWE">
            <summary>
            The size WE
            </summary>
        </member>
        <member name="F:Squid.Cursors.Select">
            <summary>
            The select
            </summary>
        </member>
        <member name="F:Squid.Cursors.Link">
            <summary>
            The link
            </summary>
        </member>
        <member name="T:Squid.Dialog">
            <summary>
            A Dialog window
            </summary>
        </member>
        <member name="T:Squid.Window">
            <summary>
            A Window
            </summary>
        </member>
        <member name="M:Squid.Window.OnUpdate">
            <summary>
            Called when [update].
            </summary>
        </member>
        <member name="M:Squid.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Window"/> class.
            </summary>
        </member>
        <member name="M:Squid.Window.StartDrag">
            <summary>
            Starts the drag.
            </summary>
        </member>
        <member name="M:Squid.Window.StopDrag">
            <summary>
            Stops the drag.
            </summary>
        </member>
        <member name="M:Squid.Window.Show(Squid.Desktop)">
            <summary>
            Shows this window on the specified Desktop.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Squid.Window.Close">
            <summary>
            Closes this window
            </summary>
        </member>
        <member name="P:Squid.Window.Modal">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Window"/> is modal.
            </summary>
            <value><c>true</c> if modal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Window.SnapDistance">
            <summary>
            Gets or sets the snap distance.
            </summary>
            <value>The snap distance.</value>
        </member>
        <member name="P:Squid.Window.AllowDragOut">
            <summary>
            Gets or sets a value indicating whether [allow drag out].
            </summary>
            <value><c>true</c> if [allow drag out]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Window.Resizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Window"/> is resizable.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Window.GripSize">
            <summary>
            Gets or sets the size of the grip.
            </summary>
            <value>The size of the grip.</value>
        </member>
        <member name="E:Squid.Dialog.OnResult">
            <summary>
            Raised when [on result].
            </summary>
        </member>
        <member name="P:Squid.Dialog.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Squid.Dialog.DialogResultEventHandler">
            <summary>
            Delegate DialogResultEventHandler
            </summary>
            <param name="sender">The sender.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:Squid.Font">
            <summary>
            Helper class to represent a font.
            This class will eventually be obsolete. Do not use.
            </summary>
        </member>
        <member name="T:Squid.Panel">
            <summary>
            A container with scrollbars
            </summary>
        </member>
        <member name="M:Squid.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Panel"/> class.
            </summary>
        </member>
        <member name="P:Squid.Panel.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Squid.Panel.ClipFrame">
            <summary>
            Gets the clip frame.
            </summary>
            <value>The clip frame.</value>
        </member>
        <member name="P:Squid.Panel.HScroll">
            <summary>
            Gets the H scroll.
            </summary>
            <value>The H scroll.</value>
        </member>
        <member name="P:Squid.Panel.VScroll">
            <summary>
            Gets the V scroll.
            </summary>
            <value>The V scroll.</value>
        </member>
        <member name="T:Squid.DropDownButton">
            <summary>
            A DropDownButton
            </summary>
        </member>
        <member name="M:Squid.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.DropDownButton"/> class.
            </summary>
        </member>
        <member name="M:Squid.DropDownButton.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="P:Squid.DropDownButton.Dropdown">
            <summary>
            Gets the dropdown.
            </summary>
            <value>The dropdown.</value>
        </member>
        <member name="P:Squid.DropDownButton.Align">
            <summary>
            Gets or sets the align.
            </summary>
            <value>The align.</value>
        </member>
        <member name="P:Squid.DropDownButton.HotDrop">
            <summary>
            Gets or sets a value indicating whether [hot drop].
            </summary>
            <value><c>true</c> if [hot drop]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.Reflector">
            <summary>
            Helper class used for Reflection.
            </summary>
        </member>
        <member name="F:Squid.Reflector.Assemblies">
            <summary>
            The assemblies
            </summary>
        </member>
        <member name="F:Squid.Reflector.TypeCache">
            <summary>
            The type cache
            </summary>
        </member>
        <member name="F:Squid.Reflector.Cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="F:Squid.Reflector.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:Squid.Reflector.GetProperties``1">
            <summary>
            Gets the properties.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>PropertyInfo[][].</returns>
        </member>
        <member name="M:Squid.Reflector.GetProperties(System.Type)">
            <summary>
            Gets the properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[][].</returns>
        </member>
        <member name="M:Squid.Reflector.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Squid.Reflector.RegisterAssemblies(System.Reflection.Assembly[])">
            <summary>
            Registers the assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Squid.Reflector.GetAttribute``1(System.Type)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Squid.Reflector.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Squid.Reflector.GetType(System.String)">
            <summary>
            Gets the type.
            </summary>
            <param name="name">The name.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Squid.Reflector.GetTypes(System.Type)">
            <summary>
            Gets the types.
            </summary>
            <param name="required">The required.</param>
            <returns>List{Type}.</returns>
        </member>
        <member name="M:Squid.Reflector.GetTypes``1">
            <summary>
            Gets the types.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>List{Type}.</returns>
        </member>
        <member name="T:Squid.ControlStyleCollection">
            <summary>
            A collection of ControlStyles
            </summary>
        </member>
        <member name="T:Squid.ControlStyle">
            <summary>
            A ControlStyle. This is a set of Styles.
            There is one Style per ControlState.
            </summary>
        </member>
        <member name="M:Squid.ControlStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ControlStyle"/> class.
            </summary>
        </member>
        <member name="M:Squid.ControlStyle.#ctor(Squid.ControlStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ControlStyle"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Squid.ControlStyle.#ctor(Squid.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ControlStyle"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Squid.ControlStyle.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>ControlStyle.</returns>
        </member>
        <member name="M:Squid.ControlStyle.Paste(Squid.ControlStyle)">
            <summary>
            Pastes the specified style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Squid.ControlStyle.Paste(Squid.Style)">
            <summary>
            Pastes the specified style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="P:Squid.ControlStyle.Styles">
            <summary>
            Gets or sets the styles.
            </summary>
            <value>The styles.</value>
        </member>
        <member name="P:Squid.ControlStyle.Tag">
            <summary>
            user data
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Squid.ControlStyle.Default">
            <summary>
            Gets or sets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:Squid.ControlStyle.Hot">
            <summary>
            Gets or sets the hot.
            </summary>
            <value>The hot.</value>
        </member>
        <member name="P:Squid.ControlStyle.Pressed">
            <summary>
            Gets or sets the pressed.
            </summary>
            <value>The pressed.</value>
        </member>
        <member name="P:Squid.ControlStyle.Disabled">
            <summary>
            Gets or sets the disabled.
            </summary>
            <value>The disabled.</value>
        </member>
        <member name="P:Squid.ControlStyle.Focused">
            <summary>
            Gets or sets the focused.
            </summary>
            <value>The focused.</value>
        </member>
        <member name="P:Squid.ControlStyle.Checked">
            <summary>
            Gets or sets the checked.
            </summary>
            <value>The checked.</value>
        </member>
        <member name="P:Squid.ControlStyle.CheckedHot">
            <summary>
            Gets or sets the checked hot.
            </summary>
            <value>The checked hot.</value>
        </member>
        <member name="P:Squid.ControlStyle.CheckedPressed">
            <summary>
            Gets or sets the checked pressed.
            </summary>
            <value>The checked pressed.</value>
        </member>
        <member name="P:Squid.ControlStyle.CheckedDisabled">
            <summary>
            Gets or sets the checked disabled.
            </summary>
            <value>The checked disabled.</value>
        </member>
        <member name="P:Squid.ControlStyle.CheckedFocused">
            <summary>
            Gets or sets the checked focused.
            </summary>
            <value>The checked focused.</value>
        </member>
        <member name="P:Squid.ControlStyle.Selected">
            <summary>
            Gets or sets the selected.
            </summary>
            <value>The selected.</value>
        </member>
        <member name="P:Squid.ControlStyle.SelectedHot">
            <summary>
            Gets or sets the selected hot.
            </summary>
            <value>The selected hot.</value>
        </member>
        <member name="P:Squid.ControlStyle.SelectedPressed">
            <summary>
            Gets or sets the selected pressed.
            </summary>
            <value>The selected pressed.</value>
        </member>
        <member name="P:Squid.ControlStyle.SelectedDisabled">
            <summary>
            Gets or sets the selected disabled.
            </summary>
            <value>The selected disabled.</value>
        </member>
        <member name="P:Squid.ControlStyle.SelectedFocused">
            <summary>
            Gets or sets the selected focused.
            </summary>
            <value>The selected focused.</value>
        </member>
        <member name="P:Squid.ControlStyle.Tint">
            <summary>
            color to tint the texture (argb)
            </summary>
            <value>The tint.</value>
        </member>
        <member name="P:Squid.ControlStyle.TextColor">
            <summary>
            color for any text to be drawn (argb)
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Squid.ControlStyle.BackColor">
            <summary>
            background color (argb)
            </summary>
            <value>The color of the back.</value>
        </member>
        <member name="P:Squid.ControlStyle.Opacity">
            <summary>
            opacity (0-1)
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Squid.ControlStyle.Font">
            <summary>
            name of the font to use for text
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Squid.ControlStyle.Texture">
            <summary>
            name of the texture to draw
            </summary>
            <value>The texture.</value>
        </member>
        <member name="P:Squid.ControlStyle.Tiling">
            <summary>
            texture tiling mode
            </summary>
            <value>The tiling.</value>
        </member>
        <member name="P:Squid.ControlStyle.TextureRect">
            <summary>
            source rectangle of the texture expressed in pixels
            </summary>
            <value>The texture rect.</value>
        </member>
        <member name="P:Squid.ControlStyle.TextPadding">
            <summary>
            text padding (distance to control borders)
            </summary>
            <value>The text padding.</value>
        </member>
        <member name="P:Squid.ControlStyle.TextAlign">
            <summary>
            text alignment
            </summary>
            <value>The text align.</value>
        </member>
        <member name="P:Squid.ControlStyle.Grid">
            <summary>
            describes the 9sclice texture regions expressed as margin
            </summary>
            <value>The grid.</value>
        </member>
        <member name="T:Squid.StyleCollection">
            <summary>
            A dictionary of ControlState/Style pairs
            </summary>
        </member>
        <member name="M:Squid.StyleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.StyleCollection"/> class.
            </summary>
        </member>
        <member name="T:Squid.Style">
            <summary>
            Describes the visual appearance of a control
            </summary>
        </member>
        <member name="M:Squid.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Style"/> class.
            </summary>
        </member>
        <member name="M:Squid.Style.#ctor(Squid.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Style"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Squid.Style.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Squid.Style.Paste(Squid.Style)">
            <summary>
            Pastes the specified style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="P:Squid.Style.Tag">
            <summary>
            user data
            </summary>
        </member>
        <member name="P:Squid.Style.TextColor">
            <summary>
            color for any text to be drawn (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.Font">
            <summary>
            name of the font to use for text
            </summary>
        </member>
        <member name="P:Squid.Style.TextPadding">
            <summary>
            text padding (distance to control borders)
            </summary>
        </member>
        <member name="P:Squid.Style.TextAlign">
            <summary>
            text alignment
            </summary>
        </member>
        <member name="P:Squid.Style.Tint">
            <summary>
            color to tint the texture (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.BackColor">
            <summary>
            background color (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.Opacity">
            <summary>
            opacity (0-1)
            </summary>
        </member>
        <member name="P:Squid.Style.Texture">
            <summary>
            name of the texture to draw
            </summary>
        </member>
        <member name="P:Squid.Style.TextureRect">
            <summary>
            source rectangle of the texture expressed in pixels
            </summary>
        </member>
        <member name="P:Squid.Style.Grid">
            <summary>
            describes the 9sclice texture regions expressed as margin
            </summary>
        </member>
        <member name="P:Squid.Style.Tiling">
            <summary>
            enables/disables the 9sclice grid
            </summary>
        </member>
        <member name="T:Squid.ColorInt">
            <summary>
            Utility class used to convert colors
            </summary>
        </member>
        <member name="M:Squid.ColorInt.FromArgb(System.Single,System.Int32)">
            <summary>
            Returns the specified ARGB color with the specified opacity.
            </summary>
            <param name="opacity">The opacity.</param>
            <param name="argb">The ARGB.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ColorInt.Blend(System.Int32,System.Int32,System.Double)">
            <summary>Blends the specified colors together.</summary>
            <param name="color1">Color to blend onto the background color.</param>
            <param name="color2">Color to blend the other color onto.</param>
            <param name="amount">How much of <paramref name="color1"/> to keep,
            “on top of” <paramref name="color2"/>.</param>
            <returns>The blended colors.</returns>
        </member>
        <member name="M:Squid.ColorInt.Overlay(System.Int32,System.Int32)">
            <summary>
            Overlays the specified colors.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ColorInt.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified colors.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ColorInt.Screen(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified colors.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ColorInt.RGBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the color expressed as integer
            </summary>
            <param name="r">red 0-1</param>
            <param name="g">green 0-1</param>
            <param name="b">blue 0-1</param>
            <param name="a">alpha 0-1</param>
            <returns></returns>
        </member>
        <member name="M:Squid.ColorInt.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the color expressed as integer
            </summary>
            <param name="alpha">alpha 0-255</param>
            <param name="red">red 0-255</param>
            <param name="green">green 0-255</param>
            <param name="blue">blue 0-255</param>
            <returns></returns>
        </member>
        <member name="T:Squid.DropDownList">
            <summary>
            A DropDownList
            </summary>
        </member>
        <member name="M:Squid.DropDownList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.DropDownList"/> class.
            </summary>
        </member>
        <member name="E:Squid.DropDownList.SelectedItemChanged">
            <summary>
            Raised when [selected item changed].
            </summary>
        </member>
        <member name="E:Squid.DropDownList.Closed">
            <summary>
            Raised when [on closed].
            </summary>
        </member>
        <member name="E:Squid.DropDownList.Opened">
            <summary>
            Raised when [on opened].
            </summary>
        </member>
        <member name="E:Squid.DropDownList.Opening">
            <summary>
            Raised when [on opening].
            </summary>
        </member>
        <member name="E:Squid.DropDownList.Closing">
            <summary>
            Raised when [on closing].
            </summary>
        </member>
        <member name="P:Squid.DropDownList.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Squid.DropDownList.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.DropDownList.Listbox">
            <summary>
            Gets the listbox.
            </summary>
            <value>The listbox.</value>
        </member>
        <member name="P:Squid.DropDownList.Dropdown">
            <summary>
            Gets the dropdown.
            </summary>
            <value>The dropdown.</value>
        </member>
        <member name="P:Squid.DropDownList.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.DropDownList.DropdownSize">
            <summary>
            Gets or sets the size of the dropdown.
            </summary>
            <value>The size of the dropdown.</value>
        </member>
        <member name="P:Squid.DropDownList.DropdownAutoSize">
            <summary>
            Gets or sets a value indicating whether [dropdown auto size].
            </summary>
            <value><c>true</c> if [dropdown auto size]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.DropDownList.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Squid.DropDownList.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="T:Squid.VoidEvent">
            <summary>
            Delegate VoidEvent
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:Squid.KeyEvent">
            <summary>
            Delegate KeyEvent
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Squid.MouseEvent">
            <summary>
            Delegate MouseEvent
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Squid.DragDropEvent">
            <summary>
            Delegate DragDropEvent
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Squid.DragDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Squid.EventWithArgs">
            <summary>
            Delegate EventWithArgs
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.SquidEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Squid.TabPageCollection">
            <summary>
            A collection of TabPages
            </summary>
        </member>
        <member name="T:Squid.ActiveList`1">
            <summary>
            A generic list that provides events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Squid.ActiveList`1.Sort">
            <summary>
            Sorts this instance.
            </summary>
        </member>
        <member name="M:Squid.ActiveList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the specified comparison.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Squid.ActiveList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the specified comparer.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Squid.ActiveList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnItemAdded(System.Object,Squid.ListEventArgs{`0})">
            <summary>
            Raises when an Item is added to the list.
            </summary>
            <param name="sender"></param>
            <param name="e">GenericItemEventArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnBeforeItemAdded(System.Object,Squid.ListEventArgs{`0})">
            <summary>
            Raises before an Item is added to the list.
            </summary>
            <param name="sender">object</param>
            <param name="e">GenericItemEventArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnItemRemoved(System.Object,Squid.ListEventArgs{`0})">
            <summary>
            Raises when an Item is removed from the list.
            </summary>
            <param name="sender">object</param>
            <param name="e">EventsArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnBeforeItemRemoved(System.Object,Squid.ListEventArgs{`0})">
            <summary>
            Raises before an Item is removed from the list.
            </summary>
            <param name="sender">object</param>
            <param name="e">GenericItemEventArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnItemsCleared(System.Object,System.EventArgs)">
            <summary>
            Raises when the Items are cleared from this list.
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnBeforeItemsCleared(System.Object,System.EventArgs)">
            <summary>
            Raises before the Items are cleared from this list.
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Squid.ActiveList`1.OnItemsSorted(System.Object,System.EventArgs)">
            <summary>
            Raises when the Items are sorted using Sort
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="E:Squid.ActiveList`1.ItemAdded">
            <summary>
            Raises when an item is added to the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.BeforeItemAdded">
            <summary>
            Raises before an item is added to the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.ItemRemoved">
            <summary>
            Raises when an item is removed from the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.BeforeItemRemoved">
            <summary>
            Raises before an item is removed from the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.ItemsCleared">
            <summary>
            Raises when the items are cleared from the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.BeforeItemsCleared">
            <summary>
            Raises before the items are cleared from the list.
            </summary>
        </member>
        <member name="E:Squid.ActiveList`1.ItemsSorted">
            <summary>
            Raises when the Items are sorted using Sort
            </summary>
        </member>
        <member name="T:Squid.TabControl">
            <summary>
            A TabControl
            </summary>
        </member>
        <member name="M:Squid.TabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TabControl"/> class.
            </summary>
        </member>
        <member name="P:Squid.TabControl.ButtonFrame">
            <summary>
            Gets the button frame.
            </summary>
            <value>The button frame.</value>
        </member>
        <member name="P:Squid.TabControl.TabPages">
            <summary>
            Gets the tab pages.
            </summary>
            <value>The tab pages.</value>
        </member>
        <member name="P:Squid.TabControl.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
            <value>The selected tab.</value>
        </member>
        <member name="T:Squid.TabPage">
            <summary>
            A TabPage
            </summary>
        </member>
        <member name="M:Squid.TabPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TabPage"/> class.
            </summary>
        </member>
        <member name="P:Squid.TabPage.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="T:Squid.TabButton">
            <summary>
            A TabButton
            </summary>
        </member>
        <member name="T:Squid.ControlCollection">
            <summary>
            A collection of controls. This class requires a parent Control.
            </summary>
        </member>
        <member name="T:Squid.ElementCollection">
            <summary>
            A collection of elements. This class requires a parent Control.
            </summary>
        </member>
        <member name="T:Squid.TextBox">
            <summary>
            A single-line text input. Text scrolls horizontally.
            </summary>
        </member>
        <member name="M:Squid.TextBox.GetCursor">
            <summary>
            Gets the cursor.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.TextBox.SetCursor(System.Int32)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Squid.TextBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified start.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Squid.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TextBox"/> class.
            </summary>
        </member>
        <member name="E:Squid.TextBox.TextChanged">
            <summary>
            Raised when [text changed].
            </summary>
        </member>
        <member name="E:Squid.TextBox.BeforeCommit">
            <summary>
            Raised before [text commit].
            </summary>
        </member>
        <member name="E:Squid.TextBox.TextCommit">
            <summary>
            Raised when [text commit].
            </summary>
        </member>
        <member name="E:Squid.TextBox.TextCancel">
            <summary>
            Raised when [text cancel].
            </summary>
        </member>
        <member name="P:Squid.TextBox.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TextBox.IsPassword">
            <summary>
            Gets or sets a value indicating whether this instance is password.
            </summary>
            <value><c>true</c> if this instance is password; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TextBox.PasswordChar">
            <summary>
            Gets or sets the password char.
            </summary>
            <value>The password char.</value>
        </member>
        <member name="P:Squid.TextBox.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Squid.TextBox.BlinkInterval">
            <summary>
            Gets or sets the blink interval.
            </summary>
            <value>The blink interval.</value>
        </member>
        <member name="P:Squid.TextBox.SelectionColor">
            <summary>
            Gets or sets the color of the selection.
            </summary>
            <value>The color of the selection.</value>
        </member>
        <member name="P:Squid.TextBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Squid.TextBox.BlinkColor">
            <summary>
            Gets or sets the color of the blink.
            </summary>
            <value>The color of the blink.</value>
        </member>
        <member name="P:Squid.TextBox.UseTextColor">
            <summary>
            Gets or sets a value indicating whether [use text color].
            </summary>
            <value><c>true</c> if [use text color]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TextBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Squid.TextBox.SelectionStart">
            <summary>
            Gets the selection start.
            </summary>
            <value>The selection start.</value>
        </member>
        <member name="P:Squid.TextBox.SelectionEnd">
            <summary>
            Gets the selection end.
            </summary>
            <value>The selection end.</value>
        </member>
        <member name="P:Squid.TextBox.Selection">
            <summary>
            Gets the selection.
            </summary>
            <value>The selection.</value>
        </member>
        <member name="T:Squid.CursorChangedEvent">
            <summary>
            Delegate CursorChangedEvent
            </summary>
            <param name="cursor">The cursor.</param>
        </member>
        <member name="T:Squid.Desktop">
             <summary>
            The root Control
             </summary>
        </member>
        <member name="F:Squid.Desktop._cursor">
            <summary>
            The _cursor
            </summary>
        </member>
        <member name="M:Squid.Desktop.GetCursor">
            <summary>
            Gets the cursor.
            </summary>
            <returns>Cursor.</returns>
        </member>
        <member name="M:Squid.Desktop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Desktop"/> class.
            </summary>
        </member>
        <member name="M:Squid.Desktop.SetHot(Squid.Control)">
            <summary>
            Sets the hot.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Squid.Desktop.GetWindowAt(System.Int32,System.Int32)">
            <summary>
            Gets the window at.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:Squid.Desktop.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:Squid.Desktop.PickControl(System.Int32,System.Int32,Squid.Desktop.PickMode)">
            <summary>
            Picks the control.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="mode">The mode.</param>
            <returns>Control.</returns>
        </member>
        <member name="M:Squid.Desktop.ShowDropdown(Squid.Control,System.Boolean)">
            <summary>
            Shows the dropdown.
            </summary>
            <param name="control">The control.</param>
            <param name="stack">if set to <c>true</c> [stack].</param>
        </member>
        <member name="M:Squid.Desktop.CloseDropdowns">
            <summary>
            Closes the dropdowns.
            </summary>
        </member>
        <member name="M:Squid.Desktop.SetTooltip(Squid.Control)">
            <summary>
            Sets the tooltip.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Squid.Desktop.Draw">
            <summary>
            Draws this instance.
            </summary>
        </member>
        <member name="M:Squid.Desktop.DrawCursor(System.Int32,System.Int32)">
            <summary>
            Draws the cursor.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Squid.Desktop.TabNext">
            <summary>
            Tabs the next.
            </summary>
        </member>
        <member name="M:Squid.Desktop.TabPrevious">
            <summary>
            Tabs the previous.
            </summary>
        </member>
        <member name="E:Squid.Desktop.CursorChanged">
            <summary>
            Raised when [cursor changed].
            </summary>
        </member>
        <member name="P:Squid.Desktop.DropTarget">
            <summary>
            Gets the drop target control.
            </summary>
            <value>The drop target control.</value>
        </member>
        <member name="P:Squid.Desktop.HotControl">
            <summary>
            Gets the hot control.
            </summary>
            <value>The hot control.</value>
        </member>
        <member name="P:Squid.Desktop.PressedControl">
            <summary>
            Gets the pressed control.
            </summary>
            <value>The pressed control.</value>
        </member>
        <member name="P:Squid.Desktop.Controls">
            <summary>
            Gets or sets the controls.
            </summary>
            <value>The controls.</value>
        </member>
        <member name="P:Squid.Desktop.ShowCursor">
            <summary>
            Gets or sets a value indicating whether [show cursor].
            </summary>
            <value><c>true</c> if [show cursor]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Desktop.CurrentCursor">
            <summary>
            Gets or sets the current cursor.
            </summary>
            <value>The current cursor.</value>
        </member>
        <member name="P:Squid.Desktop.DesignMode">
            <summary>
            Gets or sets a value indicating whether [design mode].
            </summary>
            <value><c>true</c> if [design mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Desktop.TooltipControl">
            <summary>
            Gets or sets the tooltip control.
            </summary>
            <value>The tooltip control.</value>
        </member>
        <member name="P:Squid.Desktop.DragDropSnap">
            <summary>
            Gets or sets the drag drop snap.
            </summary>
            <value>The drag drop snap.</value>
        </member>
        <member name="P:Squid.Desktop.FocusedControl">
            <summary>
            Gets the focused control.
            </summary>
            <value>The focused control.</value>
        </member>
        <member name="T:Squid.Desktop.PickMode">
            <summary>
            Enum PickMode
            </summary>
        </member>
        <member name="F:Squid.Desktop.PickMode.Control">
            <summary>
            The control
            </summary>
        </member>
        <member name="F:Squid.Desktop.PickMode.Container">
            <summary>
            The container
            </summary>
        </member>
        <member name="T:Squid.Easing">
            <summary>
            Utility class used to ease values
            </summary>
        </member>
        <member name="T:Squid.ButtonState">
            <summary>
            Enum ButtonState
            </summary>
        </member>
        <member name="F:Squid.ButtonState.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Squid.ButtonState.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:Squid.ButtonState.Press">
            <summary>
            The press
            </summary>
        </member>
        <member name="F:Squid.ButtonState.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="T:Squid.TextBoxMode">
            <summary>
            Enum TextBoxMode
            </summary>
        </member>
        <member name="F:Squid.TextBoxMode.AlphaNumeric">
            <summary>
            The alpha numeric
            </summary>
        </member>
        <member name="F:Squid.TextBoxMode.Numeric">
            <summary>
            The numeric
            </summary>
        </member>
        <member name="T:Squid.TextureMode">
            <summary>
            Enum TextureMode
            </summary>
        </member>
        <member name="F:Squid.TextureMode.Stretch">
            <summary>
            Stretch
            </summary>
        </member>
        <member name="F:Squid.TextureMode.Grid">
            <summary>
            Use sliced texture grid
            </summary>
        </member>
        <member name="F:Squid.TextureMode.GridRepeat">
            <summary>
            Repeat the edges of the grid
            </summary>
        </member>
        <member name="F:Squid.TextureMode.Repeat">
            <summary>
            Repeat the texture
            </summary>
        </member>
        <member name="F:Squid.TextureMode.RepeatX">
            <summary>
            Repeat the texture on x
            </summary>
        </member>
        <member name="F:Squid.TextureMode.RepeatY">
            <summary>
            Repeat the texture on y
            </summary>
        </member>
        <member name="T:Squid.DialogResult">
            <summary>
            Enum DialogResult
            </summary>
        </member>
        <member name="F:Squid.DialogResult.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Squid.DialogResult.OK">
            <summary>
            The OK
            </summary>
        </member>
        <member name="F:Squid.DialogResult.Cancel">
            <summary>
            The cancel
            </summary>
        </member>
        <member name="F:Squid.DialogResult.Abort">
            <summary>
            The abort
            </summary>
        </member>
        <member name="F:Squid.DialogResult.Retry">
            <summary>
            The retry
            </summary>
        </member>
        <member name="F:Squid.DialogResult.Ignore">
            <summary>
            The ignore
            </summary>
        </member>
        <member name="F:Squid.DialogResult.Yes">
            <summary>
            The yes
            </summary>
        </member>
        <member name="F:Squid.DialogResult.No">
            <summary>
            The no
            </summary>
        </member>
        <member name="T:Squid.FlowDirection">
            <summary>
            Enum FlowDirection
            </summary>
        </member>
        <member name="F:Squid.FlowDirection.LeftToRight">
            <summary>
            The left to right
            </summary>
        </member>
        <member name="F:Squid.FlowDirection.RightToLeft">
            <summary>
            The right to left
            </summary>
        </member>
        <member name="F:Squid.FlowDirection.TopToBottom">
            <summary>
            The top to bottom
            </summary>
        </member>
        <member name="F:Squid.FlowDirection.BottomToTop">
            <summary>
            The bottom to top
            </summary>
        </member>
        <member name="T:Squid.AutoSize">
            <summary>
            Enum AutoSize
            </summary>
        </member>
        <member name="F:Squid.AutoSize.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Squid.AutoSize.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="F:Squid.AutoSize.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="F:Squid.AutoSize.HorizontalVertical">
            <summary>
            The horizontal vertical
            </summary>
        </member>
        <member name="T:Squid.DragMode">
            <summary>
            Enum DragMode
            </summary>
        </member>
        <member name="F:Squid.DragMode.AxisX">
            <summary>
            The axis X
            </summary>
        </member>
        <member name="F:Squid.DragMode.AxisY">
            <summary>
            The axis Y
            </summary>
        </member>
        <member name="F:Squid.DragMode.AxisXY">
            <summary>
            The axis XY
            </summary>
        </member>
        <member name="T:Squid.DockStyle">
            <summary>
            Enum DockStyle
            </summary>
        </member>
        <member name="F:Squid.DockStyle.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Top">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Fill">
            <summary>
            The fill
            </summary>
        </member>
        <member name="F:Squid.DockStyle.CenterX">
            <summary>
            The center X
            </summary>
        </member>
        <member name="F:Squid.DockStyle.CenterY">
            <summary>
            The center Y
            </summary>
        </member>
        <member name="F:Squid.DockStyle.Center">
            <summary>
            The center
            </summary>
        </member>
        <member name="T:Squid.Orientation">
            <summary>
            Enum Orientation
            </summary>
        </member>
        <member name="F:Squid.Orientation.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="F:Squid.Orientation.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="T:Squid.ControlState">
            <summary>
            Enum ControlState
            </summary>
        </member>
        <member name="F:Squid.ControlState.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Squid.ControlState.Hot">
            <summary>
            The hot
            </summary>
        </member>
        <member name="F:Squid.ControlState.Pressed">
            <summary>
            The pressed
            </summary>
        </member>
        <member name="F:Squid.ControlState.Disabled">
            <summary>
            The disabled
            </summary>
        </member>
        <member name="F:Squid.ControlState.Focused">
            <summary>
            The focused
            </summary>
        </member>
        <member name="F:Squid.ControlState.Checked">
            <summary>
            The checked
            </summary>
        </member>
        <member name="F:Squid.ControlState.CheckedHot">
            <summary>
            The checked hot
            </summary>
        </member>
        <member name="F:Squid.ControlState.CheckedPressed">
            <summary>
            The checked pressed
            </summary>
        </member>
        <member name="F:Squid.ControlState.CheckedDisabled">
            <summary>
            The checked disabled
            </summary>
        </member>
        <member name="F:Squid.ControlState.CheckedFocused">
            <summary>
            The checked focused
            </summary>
        </member>
        <member name="F:Squid.ControlState.Selected">
            <summary>
            The selected
            </summary>
        </member>
        <member name="F:Squid.ControlState.SelectedHot">
            <summary>
            The selected hot
            </summary>
        </member>
        <member name="F:Squid.ControlState.SelectedPressed">
            <summary>
            The selected pressed
            </summary>
        </member>
        <member name="F:Squid.ControlState.SelectedDisabled">
            <summary>
            The selected disabled
            </summary>
        </member>
        <member name="F:Squid.ControlState.SelectedFocused">
            <summary>
            The selected focused
            </summary>
        </member>
        <member name="T:Squid.Alignment">
            <summary>
            Enum Alignment
            </summary>
        </member>
        <member name="F:Squid.Alignment.TopLeft">
            <summary>
            The top left
            </summary>
        </member>
        <member name="F:Squid.Alignment.TopCenter">
            <summary>
            The top center
            </summary>
        </member>
        <member name="F:Squid.Alignment.TopRight">
            <summary>
            The top right
            </summary>
        </member>
        <member name="F:Squid.Alignment.MiddleLeft">
            <summary>
            The middle left
            </summary>
        </member>
        <member name="F:Squid.Alignment.MiddleCenter">
            <summary>
            The middle center
            </summary>
        </member>
        <member name="F:Squid.Alignment.MiddleRight">
            <summary>
            The middle right
            </summary>
        </member>
        <member name="F:Squid.Alignment.BottomLeft">
            <summary>
            The bottom left
            </summary>
        </member>
        <member name="F:Squid.Alignment.BottomCenter">
            <summary>
            The bottom center
            </summary>
        </member>
        <member name="F:Squid.Alignment.BottomRight">
            <summary>
            The bottom right
            </summary>
        </member>
        <member name="F:Squid.Alignment.Inherit">
            <summary>
            The inherit
            </summary>
        </member>
        <member name="T:Squid.AnchorStyles">
            <summary>
            Enum AnchorStyles
            </summary>
        </member>
        <member name="F:Squid.AnchorStyles.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Squid.AnchorStyles.Top">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:Squid.AnchorStyles.Bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:Squid.AnchorStyles.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Squid.AnchorStyles.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="T:Squid.FlowLayoutFrame">
            <summary>
            A container that auto-layouts its children.
            Children must not be docked for this to work.
            </summary>
        </member>
        <member name="M:Squid.FlowLayoutFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.FlowLayoutFrame"/> class.
            </summary>
        </member>
        <member name="M:Squid.FlowLayoutFrame.ForceFlowLayout">
            <summary>
            Forces the flow layout.
            </summary>
        </member>
        <member name="P:Squid.FlowLayoutFrame.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
            <value>The flow direction.</value>
        </member>
        <member name="P:Squid.FlowLayoutFrame.HSpacing">
            <summary>
            Gets or sets the H spacing.
            </summary>
            <value>The H spacing.</value>
        </member>
        <member name="P:Squid.FlowLayoutFrame.VSpacing">
            <summary>
            Gets or sets the V spacing.
            </summary>
            <value>The V spacing.</value>
        </member>
        <member name="T:Squid.IExpandable">
            <summary>
            Interface IExpandable
            </summary>
        </member>
        <member name="P:Squid.IExpandable.Expanded">
            <summary>
            Gets a value indicating whether this <see cref="T:Squid.IExpandable"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.Keys">
            <summary>
            Enum Keys
            </summary>
        </member>
        <member name="F:Squid.Keys.ESCAPE">
            <summary>
            The ESCAPE
            </summary>
        </member>
        <member name="F:Squid.Keys.D1">
            <summary>
            The d1
            </summary>
        </member>
        <member name="F:Squid.Keys.D2">
            <summary>
            The d2
            </summary>
        </member>
        <member name="F:Squid.Keys.D3">
            <summary>
            The d3
            </summary>
        </member>
        <member name="F:Squid.Keys.D4">
            <summary>
            The d4
            </summary>
        </member>
        <member name="F:Squid.Keys.D5">
            <summary>
            The d5
            </summary>
        </member>
        <member name="F:Squid.Keys.D6">
            <summary>
            The d6
            </summary>
        </member>
        <member name="F:Squid.Keys.D7">
            <summary>
            The d7
            </summary>
        </member>
        <member name="F:Squid.Keys.D8">
            <summary>
            The d8
            </summary>
        </member>
        <member name="F:Squid.Keys.D9">
            <summary>
            The d9
            </summary>
        </member>
        <member name="F:Squid.Keys.D0">
            <summary>
            The d0
            </summary>
        </member>
        <member name="F:Squid.Keys.MINUS">
            <summary>
            The MINUS
            </summary>
        </member>
        <member name="F:Squid.Keys.EQUALS">
            <summary>
            The EQUALS
            </summary>
        </member>
        <member name="F:Squid.Keys.BACKSPACE">
            <summary>
            The BACKSPACE
            </summary>
        </member>
        <member name="F:Squid.Keys.TAB">
            <summary>
            The TAB
            </summary>
        </member>
        <member name="F:Squid.Keys.Q">
            <summary>
            The Q
            </summary>
        </member>
        <member name="F:Squid.Keys.W">
            <summary>
            The W
            </summary>
        </member>
        <member name="F:Squid.Keys.E">
            <summary>
            The E
            </summary>
        </member>
        <member name="F:Squid.Keys.R">
            <summary>
            The R
            </summary>
        </member>
        <member name="F:Squid.Keys.T">
            <summary>
            The T
            </summary>
        </member>
        <member name="F:Squid.Keys.Y">
            <summary>
            The Y
            </summary>
        </member>
        <member name="F:Squid.Keys.U">
            <summary>
            The U
            </summary>
        </member>
        <member name="F:Squid.Keys.I">
            <summary>
            The I
            </summary>
        </member>
        <member name="F:Squid.Keys.O">
            <summary>
            The O
            </summary>
        </member>
        <member name="F:Squid.Keys.P">
            <summary>
            The P
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTBRACKET">
            <summary>
            The LEFTBRACKET
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHTBRACKET">
            <summary>
            The RIGHTBRACKET
            </summary>
        </member>
        <member name="F:Squid.Keys.RETURN">
            <summary>
            The RETURN
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTCONTROL">
            <summary>
            The LEFTCONTROL
            </summary>
        </member>
        <member name="F:Squid.Keys.A">
            <summary>
            The A
            </summary>
        </member>
        <member name="F:Squid.Keys.S">
            <summary>
            The S
            </summary>
        </member>
        <member name="F:Squid.Keys.D">
            <summary>
            The D
            </summary>
        </member>
        <member name="F:Squid.Keys.F">
            <summary>
            The F
            </summary>
        </member>
        <member name="F:Squid.Keys.G">
            <summary>
            The G
            </summary>
        </member>
        <member name="F:Squid.Keys.H">
            <summary>
            The H
            </summary>
        </member>
        <member name="F:Squid.Keys.J">
            <summary>
            The J
            </summary>
        </member>
        <member name="F:Squid.Keys.K">
            <summary>
            The K
            </summary>
        </member>
        <member name="F:Squid.Keys.L">
            <summary>
            The L
            </summary>
        </member>
        <member name="F:Squid.Keys.SEMICOLON">
            <summary>
            The SEMICOLON
            </summary>
        </member>
        <member name="F:Squid.Keys.APOSTROPHE">
            <summary>
            The APOSTROPHE
            </summary>
        </member>
        <member name="F:Squid.Keys.GRAVE">
            <summary>
            The GRAVE
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTSHIFT">
            <summary>
            The LEFTSHIFT
            </summary>
        </member>
        <member name="F:Squid.Keys.BACKSLASH">
            <summary>
            The BACKSLASH
            </summary>
        </member>
        <member name="F:Squid.Keys.Z">
            <summary>
            The Z
            </summary>
        </member>
        <member name="F:Squid.Keys.X">
            <summary>
            The X
            </summary>
        </member>
        <member name="F:Squid.Keys.C">
            <summary>
            The C
            </summary>
        </member>
        <member name="F:Squid.Keys.V">
            <summary>
            The V
            </summary>
        </member>
        <member name="F:Squid.Keys.B">
            <summary>
            The B
            </summary>
        </member>
        <member name="F:Squid.Keys.N">
            <summary>
            The N
            </summary>
        </member>
        <member name="F:Squid.Keys.M">
            <summary>
            The M
            </summary>
        </member>
        <member name="F:Squid.Keys.COMMA">
            <summary>
            The COMMA
            </summary>
        </member>
        <member name="F:Squid.Keys.PERIOD">
            <summary>
            The PERIOD
            </summary>
        </member>
        <member name="F:Squid.Keys.SLASH">
            <summary>
            The SLASH
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHTSHIFT">
            <summary>
            The RIGHTSHIFT
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADSTAR">
            <summary>
            The NUMPADSTAR
            </summary>
        </member>
        <member name="F:Squid.Keys.MULTIPLY">
            <summary>
            The MULTIPLY
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTMENU">
            <summary>
            The LEFTMENU
            </summary>
        </member>
        <member name="F:Squid.Keys.ALT_LEFT">
            <summary>
            The AL t_ LEFT
            </summary>
        </member>
        <member name="F:Squid.Keys.SPACE">
            <summary>
            The SPACE
            </summary>
        </member>
        <member name="F:Squid.Keys.CAPITAL">
            <summary>
            The CAPITAL
            </summary>
        </member>
        <member name="F:Squid.Keys.CAPSLOCK">
            <summary>
            The CAPSLOCK
            </summary>
        </member>
        <member name="F:Squid.Keys.F1">
            <summary>
            The f1
            </summary>
        </member>
        <member name="F:Squid.Keys.F2">
            <summary>
            The f2
            </summary>
        </member>
        <member name="F:Squid.Keys.F3">
            <summary>
            The f3
            </summary>
        </member>
        <member name="F:Squid.Keys.F4">
            <summary>
            The f4
            </summary>
        </member>
        <member name="F:Squid.Keys.F5">
            <summary>
            The f5
            </summary>
        </member>
        <member name="F:Squid.Keys.F6">
            <summary>
            The f6
            </summary>
        </member>
        <member name="F:Squid.Keys.F7">
            <summary>
            The f7
            </summary>
        </member>
        <member name="F:Squid.Keys.F8">
            <summary>
            The f8
            </summary>
        </member>
        <member name="F:Squid.Keys.F9">
            <summary>
            The f9
            </summary>
        </member>
        <member name="F:Squid.Keys.F10">
            <summary>
            The F10
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMLOCK">
            <summary>
            The NUMLOCK
            </summary>
        </member>
        <member name="F:Squid.Keys.SCROLL">
            <summary>
            The SCROLL
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD7">
            <summary>
            The NUMPA d7
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD8">
            <summary>
            The NUMPA d8
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD9">
            <summary>
            The NUMPA d9
            </summary>
        </member>
        <member name="F:Squid.Keys.SUBTRACT">
            <summary>
            The SUBTRACT
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADMINUS">
            <summary>
            The NUMPADMINUS
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD4">
            <summary>
            The NUMPA d4
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD5">
            <summary>
            The NUMPA d5
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD6">
            <summary>
            The NUMPA d6
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADPLUS">
            <summary>
            The NUMPADPLUS
            </summary>
        </member>
        <member name="F:Squid.Keys.ADD">
            <summary>
            The ADD
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD1">
            <summary>
            The NUMPA d1
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD2">
            <summary>
            The NUMPA d2
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD3">
            <summary>
            The NUMPA d3
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPAD0">
            <summary>
            The NUMPA d0
            </summary>
        </member>
        <member name="F:Squid.Keys.DECIMAL">
            <summary>
            The DECIMAL
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADPERIOD">
            <summary>
            The NUMPADPERIOD
            </summary>
        </member>
        <member name="F:Squid.Keys.OEM_102">
            <summary>
            The OE M_102
            </summary>
        </member>
        <member name="F:Squid.Keys.F11">
            <summary>
            The F11
            </summary>
        </member>
        <member name="F:Squid.Keys.F12">
            <summary>
            The F12
            </summary>
        </member>
        <member name="F:Squid.Keys.F13">
            <summary>
            The F13
            </summary>
        </member>
        <member name="F:Squid.Keys.F14">
            <summary>
            The F14
            </summary>
        </member>
        <member name="F:Squid.Keys.F15">
            <summary>
            The F15
            </summary>
        </member>
        <member name="F:Squid.Keys.KANA">
            <summary>
            The KANA
            </summary>
        </member>
        <member name="F:Squid.Keys.ABNT_C1">
            <summary>
            The ABN t_ c1
            </summary>
        </member>
        <member name="F:Squid.Keys.CONVERT">
            <summary>
            The CONVERT
            </summary>
        </member>
        <member name="F:Squid.Keys.NOCONVERT">
            <summary>
            The NOCONVERT
            </summary>
        </member>
        <member name="F:Squid.Keys.YEN">
            <summary>
            The YEN
            </summary>
        </member>
        <member name="F:Squid.Keys.ABNT_C2">
            <summary>
            The ABN t_ c2
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADEQUALS">
            <summary>
            The NUMPADEQUALS
            </summary>
        </member>
        <member name="F:Squid.Keys.CIRCUMFLEX">
            <summary>
            The CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Squid.Keys.PREVTRACK">
            <summary>
            The PREVTRACK
            </summary>
        </member>
        <member name="F:Squid.Keys.AT">
            <summary>
            The AT
            </summary>
        </member>
        <member name="F:Squid.Keys.COLON">
            <summary>
            The COLON
            </summary>
        </member>
        <member name="F:Squid.Keys.UNDERLINE">
            <summary>
            The UNDERLINE
            </summary>
        </member>
        <member name="F:Squid.Keys.KANJI">
            <summary>
            The KANJI
            </summary>
        </member>
        <member name="F:Squid.Keys.STOP">
            <summary>
            The STOP
            </summary>
        </member>
        <member name="F:Squid.Keys.AX">
            <summary>
            The AX
            </summary>
        </member>
        <member name="F:Squid.Keys.UNLABELED">
            <summary>
            The UNLABELED
            </summary>
        </member>
        <member name="F:Squid.Keys.NEXTTRACK">
            <summary>
            The NEXTTRACK
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADENTER">
            <summary>
            The NUMPADENTER
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHTCONTROL">
            <summary>
            The RIGHTCONTROL
            </summary>
        </member>
        <member name="F:Squid.Keys.MUTE">
            <summary>
            The MUTE
            </summary>
        </member>
        <member name="F:Squid.Keys.CALCULATOR">
            <summary>
            The CALCULATOR
            </summary>
        </member>
        <member name="F:Squid.Keys.PLAYPAUSE">
            <summary>
            The PLAYPAUSE
            </summary>
        </member>
        <member name="F:Squid.Keys.MEDIASTOP">
            <summary>
            The MEDIASTOP
            </summary>
        </member>
        <member name="F:Squid.Keys.VOLUMEDOWN">
            <summary>
            The VOLUMEDOWN
            </summary>
        </member>
        <member name="F:Squid.Keys.VOLUMEUP">
            <summary>
            The VOLUMEUP
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBHOME">
            <summary>
            The WEBHOME
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADCOMMA">
            <summary>
            The NUMPADCOMMA
            </summary>
        </member>
        <member name="F:Squid.Keys.NUMPADSLASH">
            <summary>
            The NUMPADSLASH
            </summary>
        </member>
        <member name="F:Squid.Keys.DIVIDE">
            <summary>
            The DIVIDE
            </summary>
        </member>
        <member name="F:Squid.Keys.SYSRQ">
            <summary>
            The SYSRQ
            </summary>
        </member>
        <member name="F:Squid.Keys.ALT_RIGHT">
            <summary>
            The AL t_ RIGHT
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHTMENU">
            <summary>
            The RIGHTMENU
            </summary>
        </member>
        <member name="F:Squid.Keys.PAUSE">
            <summary>
            The PAUSE
            </summary>
        </member>
        <member name="F:Squid.Keys.HOME">
            <summary>
            The HOME
            </summary>
        </member>
        <member name="F:Squid.Keys.UP">
            <summary>
            The UP
            </summary>
        </member>
        <member name="F:Squid.Keys.UPARROW">
            <summary>
            The UPARROW
            </summary>
        </member>
        <member name="F:Squid.Keys.PAGEUP">
            <summary>
            The PAGEUP
            </summary>
        </member>
        <member name="F:Squid.Keys.PRIOR">
            <summary>
            The PRIOR
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTARROW">
            <summary>
            The LEFTARROW
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFT">
            <summary>
            The LEFT
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHT">
            <summary>
            The RIGHT
            </summary>
        </member>
        <member name="F:Squid.Keys.RIGHTARROW">
            <summary>
            The RIGHTARROW
            </summary>
        </member>
        <member name="F:Squid.Keys.END">
            <summary>
            The END
            </summary>
        </member>
        <member name="F:Squid.Keys.DOWN">
            <summary>
            The DOWN
            </summary>
        </member>
        <member name="F:Squid.Keys.DOWNARROW">
            <summary>
            The DOWNARROW
            </summary>
        </member>
        <member name="F:Squid.Keys.PAGEDOWN">
            <summary>
            The PAGEDOWN
            </summary>
        </member>
        <member name="F:Squid.Keys.NEXT">
            <summary>
            The NEXT
            </summary>
        </member>
        <member name="F:Squid.Keys.INSERT">
            <summary>
            The INSERT
            </summary>
        </member>
        <member name="F:Squid.Keys.DELETE">
            <summary>
            The DELETE
            </summary>
        </member>
        <member name="F:Squid.Keys.LEFTWINDOWS">
            <summary>
            The LEFTWINDOWS
            </summary>
        </member>
        <member name="F:Squid.Keys.RWIN">
            <summary>
            The RWIN
            </summary>
        </member>
        <member name="F:Squid.Keys.APPS">
            <summary>
            The APPS
            </summary>
        </member>
        <member name="F:Squid.Keys.POWER">
            <summary>
            The POWER
            </summary>
        </member>
        <member name="F:Squid.Keys.SLEEP">
            <summary>
            The SLEEP
            </summary>
        </member>
        <member name="F:Squid.Keys.WAKE">
            <summary>
            The WAKE
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBSEARCH">
            <summary>
            The WEBSEARCH
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBFAVORITES">
            <summary>
            The WEBFAVORITES
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBREFRESH">
            <summary>
            The WEBREFRESH
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBSTOP">
            <summary>
            The WEBSTOP
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBFORWARD">
            <summary>
            The WEBFORWARD
            </summary>
        </member>
        <member name="F:Squid.Keys.WEBBACK">
            <summary>
            The WEBBACK
            </summary>
        </member>
        <member name="F:Squid.Keys.MYCOMPUTER">
            <summary>
            The MYCOMPUTER
            </summary>
        </member>
        <member name="F:Squid.Keys.MAIL">
            <summary>
            The MAIL
            </summary>
        </member>
        <member name="F:Squid.Keys.MEDIASELECT">
            <summary>
            The MEDIASELECT
            </summary>
        </member>
        <member name="T:Squid.TextElement">
            <summary>
            A TextElement. This class is used by the internal Text layout engine.
            </summary>
        </member>
        <member name="F:Squid.TextElement.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:Squid.TextElement.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:Squid.TextElement.Font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:Squid.TextElement.Href">
            <summary>
            The href
            </summary>
        </member>
        <member name="F:Squid.TextElement.Linebreak">
            <summary>
            The linebreak
            </summary>
        </member>
        <member name="F:Squid.TextElement.Size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:Squid.TextElement.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:Squid.TextElement.Rectangle">
            <summary>
            The rectangle
            </summary>
        </member>
        <member name="M:Squid.TextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TextElement"/> class.
            </summary>
        </member>
        <member name="M:Squid.TextElement.#ctor(Squid.TextElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TextElement"/> class.
            </summary>
            <param name="copy">The copy.</param>
        </member>
        <member name="P:Squid.TextElement.IsLink">
            <summary>
            Gets a value indicating whether this instance is link.
            </summary>
            <value><c>true</c> if this instance is link; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Squid.BBCode.ConvertBBCodeToHTML(System.String)">
            <summary>
            A method to convert basic BBCode to HTML
            </summary>
            <param name="str">A string formatted in BBCode</param>
            <returns>The HTML representation of the BBCode string</returns>
        </member>
        <member name="T:Squid.ListEventArgs`1">
            <summary>
            Class ListEventArgs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Squid.ListEventArgs`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Squid.ListEventArgs`1.Item">
            <summary>
            Item
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Squid.ListEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.ListEventArgs`1"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.GuiHost">
            <summary>
            The is the main entry of Squid.
            </summary>
        </member>
        <member name="M:Squid.GuiHost.SetSkin(Squid.Skin)">
            <summary>
            Sets the skin.
            </summary>
            <param name="skin">The skin.</param>
        </member>
        <member name="M:Squid.GuiHost.GetSkin">
            <summary>
            Gets the skin.
            </summary>
            <returns>Skin.</returns>
        </member>
        <member name="M:Squid.GuiHost.SetClipboard(System.String)">
            <summary>
            sets the clipboard string
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Squid.GuiHost.GetClipboard">
            <summary>
            returns the current clipboard string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.GuiHost.AddStyle(System.String,Squid.ControlStyle)">
            <summary>
            add an additional style
            this style will be handled seperately from any active skin
            </summary>
            <param name="name">name identifier of the style</param>
            <param name="style">the ControlStyle to add</param>
        </member>
        <member name="M:Squid.GuiHost.GetStyle(System.String)">
            <summary>
            returns the style with the given name
            </summary>
            <param name="name">the name to search for</param>
            <returns>matching ControlStyle</returns>
        </member>
        <member name="M:Squid.GuiHost.GenerateStandardSkin">
            <summary>
            generates a standard skin
            this is only used for sample purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.GuiHost.MouseButton(System.Int32)">
            <summary>
            return the state of the given button index
            </summary>
            <param name="index">index of the button</param>
            <returns>state of the button</returns>
        </member>
        <member name="M:Squid.GuiHost.SetKeyboard(Squid.KeyData[])">
            <summary>
            sets the currently pressed and released keys
            </summary>
            <param name="keys">array of KeyData</param>
        </member>
        <member name="M:Squid.GuiHost.SetMouse(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets the current mouse position
            </summary>
            <param name="posX">x component of the position</param>
            <param name="posY">y component of the position</param>
            <param name="scroll">scrollwheel delta</param>
        </member>
        <member name="M:Squid.GuiHost.SetButtons(System.Boolean[])">
            <summary>
            sets the state of mouse buttons
            </summary>
            <param name="buttons">array of booleans. true = button down</param>
        </member>
        <member name="E:Squid.GuiHost.MouseDown">
            <summary>
            Raised when [mouse down].
            </summary>
        </member>
        <member name="P:Squid.GuiHost.Renderer">
            <summary>
            Gets or sets the renderer.
            This is set to NoRenderer by default.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="P:Squid.GuiHost.TimeElapsed">
            <summary>
            Elapsed time since last frame in milliseconds
            </summary>
        </member>
        <member name="P:Squid.GuiHost.AlwaysScissor">
            <summary>
            Gets or sets a value indicating whether [always scissor].
            </summary>
            <value><c>true</c> if [always scissor]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.GuiHost.MousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:Squid.GuiHost.MouseMovement">
            <summary>
            Gets the mouse movement.
            </summary>
            <value>The mouse movement.</value>
        </member>
        <member name="P:Squid.GuiHost.MouseScroll">
            <summary>
            Gets the mouse scroll.
            </summary>
            <value>The mouse scroll.</value>
        </member>
        <member name="P:Squid.GuiHost.ShiftPressed">
            <summary>
            Gets a value indicating whether [shift pressed].
            </summary>
            <value><c>true</c> if [shift pressed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.GuiHost.AltPressed">
            <summary>
            Gets a value indicating whether [alt pressed].
            </summary>
            <value><c>true</c> if [alt pressed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.GuiHost.CtrlPressed">
            <summary>
            Gets a value indicating whether [CTRL pressed].
            </summary>
            <value><c>true</c> if [CTRL pressed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.GuiHost.GlobalFadeSpeed">
            <summary>
            Gets or sets the global fade speed.
            </summary>
            <value>The global fade speed.</value>
        </member>
        <member name="P:Squid.GuiHost.DoubleClickSpeed">
            <summary>
            Gets or sets the double click speed.
            </summary>
            <value>The double click speed.</value>
        </member>
        <member name="T:Squid.ISquidRenderer">
            <summary>
            Interface ISquidRenderer
            </summary>
        </member>
        <member name="M:Squid.ISquidRenderer.GetTexture(System.String)">
            <summary>
            Gets the texture.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ISquidRenderer.GetFont(System.String)">
            <summary>
            Gets the font.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Squid.ISquidRenderer.GetTextSize(System.String,System.Int32)">
            <summary>
            Gets the size of the text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Squid.ISquidRenderer.GetTextureSize(System.Int32)">
            <summary>
            Gets the size of the texture.
            </summary>
            <param name="texture">The texture.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:Squid.ISquidRenderer.Scissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the scissor rectangle
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Squid.ISquidRenderer.DrawBox(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a box.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Squid.ISquidRenderer.DrawText(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the text.
            </summary>
            <param name="text">The text.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="font">The font.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Squid.ISquidRenderer.DrawTexture(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Squid.Rectangle,System.Int32)">
            <summary>
            Draws the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="source">The source.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Squid.ISquidRenderer.TranslateKey(System.Int32,System.Char@)">
            <summary>
            Translates the key.
            </summary>
            <param name="scancode">The scancode.</param>
            <param name="character">The character.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Squid.ISquidRenderer.StartBatch">
            <summary>
            Starts the batch.
            </summary>
        </member>
        <member name="M:Squid.ISquidRenderer.EndBatch(System.Boolean)">
            <summary>
            Ends the batch.
            </summary>
            <param name="final">if set to <c>true</c> [final].</param>
        </member>
        <member name="T:Squid.NoRenderer">
            <summary>
            And empty implementation of the ISquidRenderer interface.
            This is the default value of GuiHost.Renderer.
            </summary>
        </member>
        <member name="T:Squid.ListBoxItemCollection">
            <summary>
            A collection of ListBoxItems
            </summary>
        </member>
        <member name="T:Squid.SelectedItemChangedEventHandler">
            <summary>
            Delegate SelectedItemChangedEventHandler
            </summary>
            <param name="sender">The sender.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Squid.SelectedItemsChangedEventHandler">
            <summary>
            Delegate SelectedItemsChangedEventHandler
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:Squid.ListBox">
            <summary>
            A ListBox
            </summary>
        </member>
        <member name="M:Squid.ListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ListBox"/> class.
            </summary>
        </member>
        <member name="E:Squid.ListBox.SelectedItemChanged">
            <summary>
            Raised when [selected item changed].
            </summary>
        </member>
        <member name="E:Squid.ListBox.SelectedItemsChanged">
            <summary>
            Raised when [selected items changed].
            </summary>
        </member>
        <member name="P:Squid.ListBox.Scrollbar">
            <summary>
            Gets the scrollbar.
            </summary>
            <value>The scrollbar.</value>
        </member>
        <member name="P:Squid.ListBox.ClipFrame">
            <summary>
            Gets the clip frame.
            </summary>
            <value>The clip frame.</value>
        </member>
        <member name="P:Squid.ListBox.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Squid.ListBox.Scroll">
            <summary>
            Gets or sets the scroll.
            </summary>
            <value>The scroll.</value>
        </member>
        <member name="P:Squid.ListBox.Multiselect">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.ListBox"/> is multiselect.
            </summary>
            <value><c>true</c> if multiselect; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.ListBox.MaxSelected">
            <summary>
            Gets or sets the max selected.
            </summary>
            <value>The max selected.</value>
        </member>
        <member name="P:Squid.ListBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Squid.ListBox.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="T:Squid.ListBoxItem">
            <summary>
            A ListBoxItem. Inherit this to create custom items.
            </summary>
        </member>
        <member name="M:Squid.ListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.ListBoxItem"/> class.
            </summary>
        </member>
        <member name="P:Squid.ListBoxItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="E:Squid.ListBoxItem.SelectedChanged">
            <summary>
            Raised when [selected changed].
            </summary>
        </member>
        <member name="P:Squid.ListBoxItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Label"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Squid.Margin">
            <summary>
            Struct Margin
            </summary>
        </member>
        <member name="M:Squid.Margin.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Margin"/> struct.
            </summary>
            <param name="all">All.</param>
        </member>
        <member name="M:Squid.Margin.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Margin"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Squid.Margin.Add(Squid.Margin,Squid.Margin)">
            <summary>
            Adds the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>Margin.</returns>
        </member>
        <member name="M:Squid.Margin.Subtract(Squid.Margin,Squid.Margin)">
            <summary>
            Subtracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>Margin.</returns>
        </member>
        <member name="M:Squid.Margin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Squid.Margin.op_Addition(Squid.Margin,Squid.Margin)">
            <summary>
            Implements the +.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Margin.op_Subtraction(Squid.Margin,Squid.Margin)">
            <summary>
            Implements the -.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Margin.op_Equality(Squid.Margin,Squid.Margin)">
            <summary>
            Implements the ==.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Margin.op_Inequality(Squid.Margin,Squid.Margin)">
            <summary>
            Implements the !=.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Margin.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Squid.Margin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:Squid.Margin.All">
            <summary>
            Gets or sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="P:Squid.Margin.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Squid.Margin.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Squid.Margin.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Squid.Margin.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Squid.Margin.Horizontal">
            <summary>
            Gets the horizontal.
            </summary>
            <value>The horizontal.</value>
        </member>
        <member name="P:Squid.Margin.Vertical">
            <summary>
            Gets the vertical.
            </summary>
            <value>The vertical.</value>
        </member>
        <member name="P:Squid.Margin.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Squid.MarginConverter">
            <summary>
            Converts from String to Margin and vice versa.
            </summary>
        </member>
        <member name="M:Squid.MarginConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.MarginConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.MarginConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Squid.MarginConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">destinationType</exception>
        </member>
        <member name="M:Squid.MarginConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.</returns>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            propertyValues
            </exception>
        </member>
        <member name="M:Squid.MarginConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value; otherwise, false.</returns>
        </member>
        <member name="M:Squid.MarginConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:Squid.MarginConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties of this object; otherwise, false.</returns>
        </member>
        <member name="T:Squid.Point">
            <summary>
            Struct Point
            </summary>
        </member>
        <member name="M:Squid.Point.#ctor(Squid.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Point"/> struct.
            </summary>
            <param name="pt">The pt.</param>
        </member>
        <member name="M:Squid.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Squid.Point.op_Addition(Squid.Point,Squid.Point)">
            <summary>
            Implements the +.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Subtraction(Squid.Point,Squid.Point)">
            <summary>
            Implements the -.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Equality(Squid.Point,Squid.Point)">
            <summary>
            Implements the ==.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Inequality(Squid.Point,Squid.Point)">
            <summary>
            Implements the !=.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Multiply(Squid.Point,System.Int32)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Division(Squid.Point,System.Int32)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Multiply(Squid.Point,System.Single)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.op_Division(Squid.Point,System.Single)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Squid.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Squid.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Squid.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Squid.Point.EaseTo(Squid.Point,Squid.Point,System.Single)">
            <summary>
            Eases to.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="divisor">The divisor.</param>
            <returns>Point.</returns>
        </member>
        <member name="P:Squid.Point.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Point.x">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Squid.Point.y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="T:Squid.PointConverter">
            <summary>
            Converts from String to Point and vice versa.
            </summary>
        </member>
        <member name="M:Squid.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Squid.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Squid.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">destinationType</exception>
        </member>
        <member name="T:Squid.ResizeHandler">
            <summary>
            Delegate ResizeHandler
            </summary>
            <param name="sender">The sender.</param>
            <param name="delta">The delta.</param>
            <param name="moved">The moved.</param>
        </member>
        <member name="T:Squid.Resizer">
            <summary>
            This control provides handles to resize its parent.
            </summary>
        </member>
        <member name="T:Squid.SplitContainer">
            <summary>
            A SplitContainer. Can be used horizontally and vertically.
            This is a Frame|Button|Frame combination.
            The Button resizes Frame1.
            </summary>
        </member>
        <member name="M:Squid.SplitContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.SplitContainer"/> class.
            </summary>
        </member>
        <member name="P:Squid.SplitContainer.SplitFrame1">
            <summary>
            Gets the split frame1.
            </summary>
            <value>The split frame1.</value>
        </member>
        <member name="P:Squid.SplitContainer.SplitFrame2">
            <summary>
            Gets the split frame2.
            </summary>
            <value>The split frame2.</value>
        </member>
        <member name="P:Squid.SplitContainer.SplitButton">
            <summary>
            Gets the split button.
            </summary>
            <value>The split button.</value>
        </member>
        <member name="P:Squid.SplitContainer.RetainAspect">
            <summary>
            Gets or sets a value indicating whether [retain aspect].
            </summary>
            <value><c>true</c> if [retain aspect]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.SplitContainer.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="P:Squid.SplitContainer.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:Squid.RectanglePacker">
            <summary>Rectangle packer using an algorithm by Javier Arevalo</summary>
            <remarks>
              <para>
                Original code by Javier Arevalo (jare at iguanademos dot com). Rewritten
                to C# / .NET by Markus Ewald (cygon at nuclex dot org). The following comments
                were written by the original author when he published his algorithm.
              </para>
              <para>
                You have a bunch of rectangular pieces. You need to arrange them in a
                rectangular surface so that they don't overlap, keeping the total area of the
                rectangle as small as possible. This is fairly common when arranging characters
                in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as
                well.
              </para>
              <para>
                The idea of this algorithm is that, as we add rectangles, we can pre-select
                "interesting" places where we can try to add the next rectangles. For optimal
                results, the rectangles should be added in order. I initially tried using area
                as a sorting criteria, but it didn't work well with very tall or very flat
                rectangles. I then tried using the longest dimension as a selector, and it
                worked much better. So much for intuition...
              </para>
              <para>
                These "interesting" places are just to the right and just below the currently
                added rectangle. The first rectangle, obviously, goes at the top left, the next
                one would go either to the right or below this one, and so on. It is a weird way
                to do it, but it seems to work very nicely.
              </para>
              <para>
                The way we search here is fairly brute-force, the fact being that for most
                offline purposes the performance seems more than adequate. I have generated a
                japanese font with around 8500 characters and all the time was spent generating
                the bitmaps.
              </para>
              <para>
                Also, for all we care, we could grow the parent rectangle in a different way
                than power of two. It just happens that power of 2 is very convenient for
                graphics hardware textures.
              </para>
              <para>
                I'd be interested in hearing of other approaches to this problem. Make sure
                to post them on http://www.flipcode.com
              </para>
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.packingAreaWidth">
            <summary>Maximum allowed width of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.packingAreaHeight">
            <summary>Maximum allowed height of the packing area</summary>
        </member>
        <member name="M:Squid.RectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:Squid.RectanglePacker.Pack(System.Int32,System.Int32)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:Squid.RectanglePacker.optimizePlacement(Squid.Point@,System.Int32,System.Int32)">
            <summary>
              Optimizes the rectangle's placement by moving it either left or up to fill
              any gaps resulting from rectangles blocking the anchors of the most optimal
              placements.
            </summary>
            <param name="placement">Placement to be optimized</param>
            <param name="rectangleWidth">Width of the rectangle to be optimized</param>
            <param name="rectangleHeight">Height of the rectangle to be optimized</param>
        </member>
        <member name="M:Squid.RectanglePacker.selectAnchorRecursive(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Searches for a free anchor and recursively enlarges the packing area
              if none can be found.
            </summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Width of the tested packing area</param>
            <param name="testedPackingAreaHeight">Height of the tested packing area</param>
            <returns>
              Index of the anchor the rectangle is to be placed at or -1 if the rectangle
              does not fit in the packing area anymore.
            </returns>
        </member>
        <member name="M:Squid.RectanglePacker.findFirstFreeAnchor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Locates the first free anchor at which the rectangle fits</summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>The index of the first free anchor or -1 if none is found</returns>
        </member>
        <member name="M:Squid.RectanglePacker.isFree(Squid.RectanglePacker.PackingRectangle@,System.Int32,System.Int32)">
            <summary>
              Determines whether the rectangle can be placed in the packing area
              at its current location.
            </summary>
            <param name="rectangle">Rectangle whose position to check</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>True if the rectangle can be placed at its current position</returns>
        </member>
        <member name="M:Squid.RectanglePacker.insertAnchor(Squid.Point)">
            <summary>Inserts a new anchor point into the anchor list</summary>
            <param name="anchor">Anchor point that will be inserted</param>
            <remarks>
              This method tries to keep the anchor list ordered by ranking the anchors
              depending on the distance from the top left corner in the packing area.
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.actualPackingAreaWidth">
            <summary>Current width of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.actualPackingAreaHeight">
            <summary>Current height of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.packedRectangles">
            <summary>Rectangles contained in the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.anchors">
            <summary>Anchoring points where new rectangles can potentially be placed</summary>
        </member>
        <member name="T:Squid.RectanglePacker.AnchorRankComparer">
            <summary>Compares the 'rank' of anchoring points</summary>
            <remarks>
              Anchoring points are potential locations for the placement of new rectangles.
              Each time a rectangle is inserted, an anchor point is generated on its upper
              right end and another one at its lower left end. The anchor points are kept
              in a list that is ordered by their closeness to the upper left corner of the
              packing area (their 'rank') so the packer favors positions that are closer to
              the upper left for new rectangles.
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.AnchorRankComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:Squid.RectanglePacker.AnchorRankComparer.Compare(Squid.Point,Squid.Point)">
            <summary>Compares the rank of two anchors against each other</summary>
            <param name="left">Left anchor point that will be compared</param>
            <param name="right">Right anchor point that will be compared</param>
            <returns>The relation of the two anchor point's ranks to each other</returns>
        </member>
        <member name="T:Squid.Slider">
            <summary>
            A Slider control. Also known as TrackBar.
            </summary>
        </member>
        <member name="M:Squid.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.Slider"/> class.
            </summary>
        </member>
        <member name="E:Squid.Slider.ValueChanged">
            <summary>
            Raised when [value changed].
            </summary>
        </member>
        <member name="P:Squid.Slider.Steps">
            <summary>
            Gets or sets the steps.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:Squid.Slider.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Squid.Slider.AutoScale">
            <summary>
            Gets or sets a value indicating whether [auto scale].
            </summary>
            <value><c>true</c> if [auto scale]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Slider.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Squid.Slider.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Squid.Slider.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.Slider.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Squid.Slider.Ease">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.Slider"/> is ease.
            </summary>
            <value><c>true</c> if ease; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.Slider.EasedValue">
            <summary>
            Gets the eased value.
            </summary>
            <value>The eased value.</value>
        </member>
        <member name="P:Squid.Slider.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Squid.SelectedNodeChangedEventHandler">
            <summary>
            Delegate SelectedNodeChangedEventHandler
            </summary>
            <param name="sender">The sender.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Squid.TreeView">
            <summary>
            A TreeView
            </summary>
        </member>
        <member name="M:Squid.TreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TreeView"/> class.
            </summary>
        </member>
        <member name="E:Squid.TreeView.SelectedNodeChanged">
            <summary>
            Raised when [selected node changed].
            </summary>
        </member>
        <member name="P:Squid.TreeView.Scrollbar">
            <summary>
            Gets the scrollbar.
            </summary>
            <value>The scrollbar.</value>
        </member>
        <member name="P:Squid.TreeView.ClipFrame">
            <summary>
            Gets the clip frame.
            </summary>
            <value>The clip frame.</value>
        </member>
        <member name="P:Squid.TreeView.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="P:Squid.TreeView.SelectedNode">
            <summary>
            Gets or sets the selected node.
            </summary>
            <value>The selected node.</value>
        </member>
        <member name="P:Squid.TreeView.Indent">
            <summary>
            Gets or sets the indent.
            </summary>
            <value>The indent.</value>
        </member>
        <member name="T:Squid.TreeNodeCollection">
            <summary>
            A collection of TreeNodes
            </summary>
        </member>
        <member name="T:Squid.TreeNode">
            <summary>
            A TreeNode. Inherit this to create custom nodes.
            </summary>
        </member>
        <member name="E:Squid.TreeNode.SelectedChanged">
            <summary>
            Raised when [on selected changed].
            </summary>
        </member>
        <member name="E:Squid.TreeNode.ExpandedChanged">
            <summary>
            Raised when [on selected changed].
            </summary>
        </member>
        <member name="P:Squid.TreeNode.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.TreeNode"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TreeNode.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Squid.TreeNode"/> is expanded.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Squid.TreeNode.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Squid.TreeNode.NodeDepth">
            <summary>
            Gets the node depth.
            </summary>
            <value>The node depth.</value>
        </member>
        <member name="P:Squid.TreeNode.Nodes">
            <summary>
            Gets or sets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="P:Squid.TreeNode.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Squid.TreeNodeDropDown">
            <summary>
            A TreeNode using a DropDownButton and a Button to expand.
            </summary>
        </member>
        <member name="M:Squid.TreeNodeDropDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TreeNodeDropDown"/> class.
            </summary>
        </member>
        <member name="M:Squid.TreeNodeDropDown.Button_MouseClick(Squid.Control,Squid.MouseEventArgs)">
            <summary>
            Button_s the mouse click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Squid.TreeNodeDropDown.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.TreeNodeDropDown.DropDownButton">
            <summary>
            Gets the drop down button.
            </summary>
            <value>The drop down button.</value>
        </member>
        <member name="T:Squid.TreeNodeLabel">
            <summary>
            A TreeNode using a Label and a Button to expand
            </summary>
        </member>
        <member name="M:Squid.TreeNodeLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squid.TreeNodeLabel"/> class.
            </summary>
        </member>
        <member name="M:Squid.TreeNodeLabel.Label_MouseClick(Squid.Control,Squid.MouseEventArgs)">
            <summary>
            Label_s the mouse click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Squid.TreeNodeLabel.Button_MouseClick(Squid.Control,Squid.MouseEventArgs)">
            <summary>
            Button_s the mouse click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Squid.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Squid.TreeNodeLabel.Button">
            <summary>
            Gets the button.
            </summary>
            <value>The button.</value>
        </member>
        <member name="P:Squid.TreeNodeLabel.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
    </members>
</doc>
